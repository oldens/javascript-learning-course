console.log("Лекція 4: Масиви та Цикли в JavaScript");

// ВКЛАДЕНІ МАСИВИ (NEST ARRAYS)
// Масиви можуть містити інші масиви як свої елементи, утворюючи багатовимірні структури.
// Це зручно для представлення таблиць, матриць або складних даних.

let nestedArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(nestedArray[0][1]); // Виведе: 2

// ДОСТУП ДО ДАНИХ МАСИВУ (ACCESS ARRAY DATA)
// Елементи масиву доступні за їх індексами, починаючи з нуля.
// Це дозволяє отримувати або використовувати значення, які зберігаються в масиві.

let array = [10, 20, 30, 40, 50];
console.log(array[2]); // Виведе: 30

// ЗМІНА ДАНИХ МАСИВУ (MODIFY ARRAY DATA)
// Елементи масиву можуть бути змінені шляхом присвоєння нового значення за індексом.
// Це дозволяє оновлювати інформацію без створення нового масиву.

array[2] = 35;
console.log(array[2]); // Виведе: 35

// ДОСТУП ДО БАГАТОВИМІРНИХ МАСИВІВ (ACCESS MULTI-DIMENSIONAL ARRAYS)
// Для доступу до елементів вкладених масивів використовується кілька індексів.
// Перший індекс вказує на масив, а другий — на елемент у цьому вкладеному масиві.

let multiDimensionalArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(multiDimensionalArray[1][2]); // Виведе: 6

// ОСНОВНІ МЕТОДИ

// push() додає один або кілька елементів до кінця масиву.
let fruits = ["яблуко", "банан"];
fruits.push("апельсин");
console.log(fruits); // ["яблуко", "банан", "апельсин"]

// pop() видаляє останній елемент з масиву і повертає його.
let lastFruit = fruits.pop();
console.log(lastFruit); // "апельсин"
console.log(fruits); // ["яблуко", "банан"]

// shift() видаляє перший елемент масиву, а решта елементів зсуваються на одну позицію вліво.
let firstFruit = fruits.shift();
console.log(firstFruit); // "яблуко"
console.log(fruits); // ["банан"]

// unshift() додає один або кілька елементів на початок масиву, зсуваючи всі інші елементи вправо.
fruits.unshift("яблуко");
console.log(fruits); // ["яблуко", "банан"]

// ІТЕРАЦІЙНІ МЕТОДИ МАСИВІВ

// map() створює новий масив з результатами виклику заданої функції для кожного елемента масиву.
let numbers = [1, 2, 3, 4];
let doubled = numbers.map(function(num) {
  return num * 2;
});
console.log(doubled); // [2, 4, 6, 8]

// filter() створює новий масив з усіма елементами, які пройшли перевірку, задану у функції.
let evenNumbers = numbers.filter(function(num) {
  return num % 2 === 0;
});
console.log(evenNumbers); // [2, 4]

// reduce() застосовує функцію до кожного елемента масиву (зліва направо), щоб звести його до одного значення.
let sum = numbers.reduce(function(total, num) {
  return total + num;
}, 0);
console.log(sum); // 10

// ЦИКЛИ (LOOPS)
// Цикли у JavaScript використовуються для виконання повторюваних дій, таких як обхід масивів або виконання коду до досягнення певної умови.

// Цикл while
// Виконує код доти, доки задана умова залишається істинною. Якщо умова стає хибною, виконання циклу припиняється.

let i = 0;
while (i < 5) {
  console.log("Цикл while: " + i);
  i++;
}

// Цикл do...while
// Виконує код хоча б один раз, незалежно від умови, і перевіряє її лише після виконання першої ітерації.

let j = 0;
do {
  console.log("Цикл do...while: " + j);
  j++;
} while (j < 5);

// Цикл for
// Цикл із визначеною кількістю ітерацій, що включає ініціалізацію, перевірку умови і оновлення змінних у кожній ітерації.

for (let k = 0; k < 5; k++) {
  console.log("Цикл for: " + k);
}

// Цикл for...of
// Використовується для ітерації по елементах масивів або інших ітеративних об’єктів, забезпечуючи зручний доступ до значень.

let iterableArray = [10, 20, 30, 40, 50];
for (let value of iterableArray) {
  console.log("Цикл for...of: " + value);
}

// Цикл for...in
// Ітерація по ключах об’єкта, що дозволяє працювати з усіма його властивостями.

let object = {a: 1, b: 2, c: 3};
for (let key in object) {
  console.log("Цикл for...in: " + key + " = " + object[key]);
}
