This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
html_css_block/
  lessons 02 CSS/
    .idea/
      inspectionProfiles/
        profiles_settings.xml
      .gitignore
      misc.xml
      modules.xml
      topic2.iml
    index.html
    index1.html
  lessons 03 VSCode /
    my_class/
      pages/
        about.html
      styles/
        main.css
      index.html
lectures/
  lesson1-Basics-JavaScript/
    exercise1-Create-Simple-Website.md
    lecture1-Basics-JavaScript.js
    lecture1-Basics-JavaScript.md
  lesson2-Math-Strings-Logical-Operators/
    exercise2-Guess-the-Number-Game.md
    lecture2-Math-Strings-Logical-Operators.js
    lecture2-Math-Strings-Logical-Operators.md
  lesson3-Functions-Arguments-Parameters-Scope-Return/
    exercise3-Functions-Arguments-Parameters-Scope-Return.md
    lecture3-Functions-Arguments-Parameters-Scope-Return.js
    lecture3-Functions-Arguments-Parameters-Scope-Return.md
  lesson4-Arrays-Loops/
    exercise4-Arrays-Loops.md
    lecture4-Arrays-Loops.js
    lecture4-Arrays-Loops.md
  lesson5-Algorithms/
    geojson/
      geojson.json
    exercise5-Find-Nearest-Cafe.md
    lecture5-Algorithms.md
    solution5-Find-Nearest-Cafe.js
  lesson5-BlackJack-OOP/
    activity_diagram.puml
    BlackJack-OOP.md
    lecture5-UML.md
    sequence_diagram.puml
  lesson6-Cryptocurrencies-Blockchain/
    exercise6-Encrypting-Messages.md
    lecture6-Cryptocurrencies-Blockchain.md
    questions.csv
  lesson6-DOM-Basics/
    DOM-Questions.csv
    exercise6-DOM-Basics.md
    lecture6-DOM-Basics.md
  lesson7-Objects/
    exercise7-Objects.md
    lecture7-Objects.md
  lesson8-OOP/
    lecture8-OOP.md
  lessons-PivotTabales/
    expenses_full.csv
projects/
  black-jack/
    images/
      file_list.txt
    index.html
    instructions.md
    script.js
    style.css
  project1.md
.gitignore
questions.csv
README.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="projects/project1.md">
# Проект 1: Створення простої JavaScript програми

Ласкаво просимо до першого проекту курсу вивчення JavaScript! У цьому проекті ви створите просту JavaScript програму, яка дозволяє користувачам виконувати базові арифметичні операції (додавання, віднімання, множення та ділення) над двома числами.

## Вимоги до проекту

1. Створіть HTML файл з формою, яка дозволяє користувачам вводити два числа та вибирати арифметичну операцію.
2. Створіть JavaScript файл, який обробляє відправку форми, виконує вибрану арифметичну операцію та відображає результат.
3. Використовуйте відповідні HTML елементи, такі як поля введення, кнопки та випадаючі списки, для створення форми.
4. Використовуйте JavaScript для перевірки введених користувачем даних та забезпечення того, що введені значення є дійсними числами.
5. Відображайте результат арифметичної операції на веб-сторінці.

## Приклад

Ось приклад того, як може виглядати HTML файл:

```html
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Проста арифметична програма</title>
  <script src="app.js" defer></script>
</head>
<body>
  <h1>Проста арифметична програма</h1>
  <form id="arithmetic-form">
    <label for="number1">Число 1:</label>
    <input type="number" id="number1" name="number1" required>
    <br>
    <label for="number2">Число 2:</label>
    <input type="number" id="number2" name="number2" required>
    <br>
    <label for="operation">Операція:</label>
    <select id="operation" name="operation" required>
      <option value="add">Додавання</option>
      <option value="subtract">Віднімання</option>
      <option value="multiply">Множення</option>
      <option value="divide">Ділення</option>
    </select>
    <br>
    <button type="submit">Обчислити</button>
  </form>
  <h2>Результат: <span id="result"></span></h2>
</body>
</html>
```

Ось приклад того, як може виглядати JavaScript файл:

```javascript
document.addEventListener("DOMContentLoaded", function() {
  const form = document.getElementById("arithmetic-form");
  const resultSpan = document.getElementById("result");

  form.addEventListener("submit", function(event) {
    event.preventDefault();

    const number1 = parseFloat(document.getElementById("number1").value);
    const number2 = parseFloat(document.getElementById("number2").value);
    const operation = document.getElementById("operation").value;

    if (isNaN(number1) || isNaN(number2)) {
      resultSpan.textContent = "Будь ласка, введіть дійсні числа.";
      return;
    }

    let result;
    switch (operation) {
      case "add":
        result = number1 + number2;
        break;
      case "subtract":
        result = number1 - number2;
        break;
      case "multiply":
        result = number1 * number2;
        break;
      case "divide":
        if (number2 === 0) {
          resultSpan.textContent = "Не можна ділити на нуль.";
          return;
        }
        result = number1 / number2;
        break;
      default:
        resultSpan.textContent = "Невірна операція.";
        return;
    }

    resultSpan.textContent = result;
  });
});
```

## Висновок

У цьому проекті ви створили просту JavaScript програму, яка дозволяє користувачам виконувати базові арифметичні операції над двома числами. Ви дізналися, як створити HTML форму, обробляти відправку форми за допомогою JavaScript, перевіряти введені користувачем дані та відображати результат на веб-сторінці. Цей проект допоможе вам застосувати свої знання JavaScript та HTML для створення функціонального веб-додатку.
</file>

<file path=".gitignore">
html_css_block/lessons 06 Grid/students_grid.mp4
html_css_block/lessons 07 Nesting Grid/main_grid.mp4
</file>

<file path="html_css_block/lessons 02 CSS/.idea/inspectionProfiles/profiles_settings.xml">
<component name="InspectionProjectProfileManager">
  <settings>
    <option name="USE_PROJECT_PROFILE" value="false" />
    <version value="1.0" />
  </settings>
</component>
</file>

<file path="html_css_block/lessons 02 CSS/.idea/.gitignore">
# Default ignored files
/shelf/
/workspace.xml
# Editor-based HTTP Client requests
/httpRequests/
# Datasource local storage ignored files
/dataSources/
/dataSources.local.xml
</file>

<file path="html_css_block/lessons 02 CSS/.idea/misc.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Black">
    <option name="sdkName" value="Python 3.9" />
  </component>
  <component name="ProjectRootManager" version="2" project-jdk-name="Python 3.9" project-jdk-type="Python SDK" />
</project>
</file>

<file path="html_css_block/lessons 02 CSS/.idea/modules.xml">
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/topic2.iml" filepath="$PROJECT_DIR$/.idea/topic2.iml" />
    </modules>
  </component>
</project>
</file>

<file path="html_css_block/lessons 02 CSS/.idea/topic2.iml">
<?xml version="1.0" encoding="UTF-8"?>
<module type="PYTHON_MODULE" version="4">
  <component name="NewModuleRootManager">
    <content url="file://$MODULE_DIR$" />
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
  </component>
</module>
</file>

<file path="html_css_block/lessons 02 CSS/index.html">
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Наш Клас</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f4;
            text-align: center;
        }
        h1 {
            background-color: #4CAF50;
            color: white;
            padding: 20px 0;
        }
        h2 {
            color: #333;
        }
        .student {
            background-color: white;
            margin: 20px auto;
            padding: 20px;
            width: 300px;
            border: 2px solid #ddd;
            border-radius: 10px;
        }
        .student img {
            width: 100%;
            height: auto;
            border-radius: 10px;
        }
        .student p {
            font-size: 16px;
            color: #666;
        }
    </style>
</head>
<body>

    <!-- Заголовок сторінки -->
    <h1>8 Клас - Наші Учні</h1>

    <!-- Структура для кожного учня -->
    <div class="student">
        <img src="./img/phtoto1.jpg" alt="Фото учня">
        <h2>Ім'я Прізвище</h2>
        <p>Хобі: Гра на гітарі</p>
    </div>

    <div class="student">
        <img src="./img/phtoto2.jpg" alt="Фото учня">
        <h2>Ім'я Прізвище</h2>
        <p>Хобі: Футбол</p>
    </div>

    <div class="student">
        <img src="./img/phtoto3.jpg" alt="Фото учня">
        <h2>Ім'я Прізвище</h2>
        <p>Хобі: Малювання</p>
    </div>

    <!-- Додайте більше учнів за потреби -->
    <div class="student">
        <img src="./img/phtoto4.jpg" alt="Фото учня">
        <h2>Ім'я Прізвище</h2>
        <p>Хобі: Шахи</p>
    </div>

</body>
</html>
</file>

<file path="html_css_block/lessons 02 CSS/index1.html">
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
    <title> Наш клас</title>

    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: grey;
            text-align: center;
        }

        h1 {
            background-color: #4CAF50;
            color: white;
            padding: 20px;
        }

        .student {
            background-color: white;
            width: 300px;
        }

    </style>
</head>


<body>
<h1> Наш клас</h1>

<div class="student">
    <img alt="Іван Іванов" src="./img/phtoto1.jpg">
    <h2>Іван Іванов</h2>
    <p>Дуже любить грати в шахи</p>
</div>

</body>

</html>
</file>

<file path="html_css_block/lessons 03 VSCode /my_class/pages/about.html">
<html lang="en">


<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>

<body>
    
</body>



</html>
</file>

<file path="html_css_block/lessons 03 VSCode /my_class/styles/main.css">
body {
    text-align: center;
    font-family: Arial, sans-serif;
    background-color: white;
    display: flex;
    flex-direction: column;

}

h1 {
    background-color: #4CAF50;
    color: white;
    padding: 20px 0;
}

h2 {
    color: #333;
}

.student {
    background-color: white;
    margin: 20px auto;
    padding: 40px;
    width: 300px;
    border-radius: 10px;
    transition: 2s all;
    /* display: block; */
}

.student:hover {
    opacity: 20%;
    background-color: yellow;
    box-shadow: 4px 4px grey;

}

.student img {
    width: 100%;
    height: auto;
    border-radius: 20px;
}

.student p {
    font-size: 16px;
    color: #666;
}

.links {
    font-size: 32px;
}

.main_column {
    display: flex;
    flex-direction: column;
}

.menu img {
    width: 10em;
}

.box {
    position: relative;
    color: #fff;
    border-radius: 3px;
}

.box::before,
.box::after {
    content: '';
    z-index: -1;
    position: absolute;
    width: calc(100% + 30px);
    height: calc(100% + 30px);
    top: -15px;
    left: -15px;
    border-radius: 8px;
    background: linear-gradient(45deg,
        #ffff00, #00ff00, #0099ff, #001aff, #a200ff, #ff0055, #ff0000,
        #ff0055, #ff0000, #ffff00, #00ff00, #0099ff, #001aff, #a200ff
    );
    background-size: 300%;
    animation: border 12s linear infinite;
}

.box::after {
    filter: blur(50px);
}

@keyframes border {
    0%, 100% {
        background-position: 0 0;
    }

    50% {
        background-position: 300%;
    }
}
</file>

<file path="html_css_block/lessons 03 VSCode /my_class/index.html">
<!DOCTYPE html>
<html lang="ua">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="styles/main.css" media="all">
</head>

<body>
    <h1>Hi my class</h1>
    <div class="menu">

        <a href="./pages/travels.html"> <img src="icons/indicator-svgrepo-com.svg" alt="Подорожі"> </a>
        <a href="./pages/friends.html"> <img src="icons/polaroid-svgrepo-com.svg" alt="Друзі"> </a>
        <a href="./pages/projects.html"> <img src="icons/villa-svgrepo-com.svg" alt="Проекти"> </a>


    </div>

    <div class="main_column">
        <div style="display:flex; flex-direction: row;">
            <div class="student">
                <img src="img/photo1.jpg" alt="Фото 1">
                <h2>Петров Петро</h2>
                <p>Музикант</p>
            </div>

            <div class="student">
                <img src="img/photo2.jpg" alt="Фото 1">
                <h2>Іванов Олексів</h2>
                <p>Любить грати в шафи</p>
            </div>


            <div class="student">
                <img src="img/photo3.jpg" alt="Фото 1">
                <h2>Прізвище Імя</h2>
                <p>Хороша людина</p>
            </div>
        </div>
    </div>

    <div class="student">
        <img src="img/photo4.jpg" alt="Фото 1">
        <h2>Прізвище Імя</h2>
        <p>Неперевершений гравець в компютерні ігри</p>
    </div>



    <div class="student">
        <img src="img/photo4.jpg" alt="Фото 1">
        <h2>Прізвище Імя</h2>
        <p>Неперевершений гравець в компютерні ігри</p>
    </div>

    <div class="student box">
        <img src="img/photo4.jpg" alt="Фото 1">
        <h2>Прізвище Імя</h2>
        <p>Неперевершений гравець в компютерні ігри</p>
    </div>

    </div>
    <div class="links">
        <a href="https:\\google.com" target="_blank"> Наш ютуб канал</a>
        <input type="text" placeholder="Search">
    </div>


</body>

</html>
</file>

<file path="lectures/lesson1-Basics-JavaScript/exercise1-Create-Simple-Website.md">
# Вправа 1: Створення простого веб-сайту з кнопкою "Home work"

Ласкаво просимо до другої вправи курсу вивчення JavaScript! У цій вправі ви будете створювати простий веб-сайт з кнопкою "Home work" та реалізовувати функцію для розв'язання квадратного рівняння. Після натискання кнопки у користувача потрібно спитати коефіцієнти квадратного рівняння, порахувати корені і вивести їх. Якщо виникають складнощі можна підглянути інструкції.
Результат потрібно закомітити, запушити в репозиторій і надати посилання до вашого репозиторію в mystat

## Інструкції

1. Створіть HTML файл з наступним вмістом:

```html
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Домашнє завдання</title>
</head>
<body>
    <h1>Домашнє завдання</h1>
    <button id="homeworkButton">Home work</button>
    <script src="homework.js"></script>
</body>
</html>
```

2. Створіть JavaScript файл з наступним вмістом:

```javascript
document.getElementById("homeworkButton").onclick = function() {
    let a = prompt("Введіть коефіцієнт a:");
    let b = prompt("Введіть коефіцієнт b:");
    let c = prompt("Введіть коефіцієнт c:");

    a = parseFloat(a);
    b = parseFloat(b);
    c = parseFloat(c);

    let discriminant = b * b - 4 * a * c;
    if (discriminant > 0) {
        let x1 = (-b + Math.sqrt(discriminant)) / (2 * a);
        let x2 = (-b - Math.sqrt(discriminant)) / (2 * a);
        alert("Корені рівняння: x1 = " + x1 + ", x2 = " + x2);
    } else if (discriminant === 0) {
        let x = -b / (2 * a);
        alert("Рівняння має один корінь: x = " + x);
    } else {
        alert("Рівняння не має дійсних коренів.");
    }
};
```

## Приклад

Ось приклад того, як виконати вправу:

1. Створіть HTML файл з вказаним вмістом.
2. Створіть JavaScript файл з вказаним вмістом.
3. Відкрийте HTML файл у браузері.
4. Натисніть кнопку "Home work".
5. Введіть коефіцієнти a, b та c у відповідні поля.
6. Отримайте результат розв'язання квадратного рівняння у вигляді спливаючого вікна.

## Висновок

У цій вправі ви створили простий веб-сайт з кнопкою "Home work" та реалізували функцію для розв'язання квадратного рівняння. Ви дізналися, як створювати HTML файли, підключати JavaScript файли та обробляти події на веб-сторінці.
</file>

<file path="lectures/lesson1-Basics-JavaScript/lecture1-Basics-JavaScript.js">
console.log("Привіт, JavaScript!");

// ВСТУПНА ЧАСТИНА
// JavaScript — це мова програмування, яка дозволяє створювати динамічні веб-сторінки.
// Вона використовується для додавання інтерактивності, наприклад: реагування на події, динамічної зміни контенту тощо.

// ВИКОНАННЯ JAVASCRIPT
// Код JavaScript можна виконувати в консоль розробника браузера. 
// Приклад (вставте цей код у консоль браузера):
console.log("Привіт, JavaScript!");

// Інші способи виконання:
// - Вбудований скрипт у HTML: <script>console.log("Hello!");</script>
// - Зовнішній файл: Підключення через <script src="script.js"></script>

// КОМЕНТУВАННЯ КОДУ
// Однорядковий коментар пояснює один рядок
/* Багаторядковий коментар
   використовується для пояснення
   кількох рядків */

// ЗМІННІ

// ОГОЛОШЕННЯ ЗМІННИХ
var globalVar = "Це var — глобальна змінна"; // Застарілий спосіб, уникайте використання
let localVar = "Це let — локальна змінна"; // Більш сучасний спосіб
const constantVar = "Це const — константа"; // Константа, значення не можна змінити

// Чутливість до регістру
let myVariable = "CamelCase"; // camelCase — для змінних
let MyVariable = "PascalCase"; // PascalCase — для класів
let my_variable = "snake_case"; // snake_case — іноді використовується в специфічних завданнях
const MY_CONSTANT = "UPPER_CASE"; // UPPER_CASE — для констант

// ОПЕРАТОР ПРИСВОЄННЯ
let a = 5; // Присвоюємо значення 5 змінній a
a = a + 1; // Оновлюємо значення: тепер a дорівнює 6

// ІНІЦІАЛІЗАЦІЯ ЗМІННИХ
let initialized = "Ініціалізована змінна"; // Одночасне оголошення і присвоєння значення
let uninitialized; // Змінна оголошена, але не має значення
console.log(uninitialized); // Виведе: undefined

// ТИПИ ДАНИХ

// Примітивні типи
let numberType = 42; // number
let stringType = "Привіт!"; // string
let booleanType = true; // boolean
let undefinedType; // undefined
let nullType = null; // null
let symbolType = Symbol("унікальний"); // symbol
let bigintType = 123456789012345678901234567890n; // bigint

// Складний тип
let objectType = { key: "value" }; // object
let arrayType = [1, 2, 3]; // масив (array)
let functionType = function () {
  console.log("Це функція");
}; // функція (function)

// Динамічна типізація
let dynamicVariable = 10; // number
console.log(typeof dynamicVariable); // Виведе: number
dynamicVariable = "Тепер це рядок";
console.log(typeof dynamicVariable); // Виведе: string

// Оператор typeof
console.log(typeof 42); // Виведе: number
console.log(typeof "JavaScript"); // Виведе: string
console.log(typeof true); // Виведе: boolean
console.log(typeof undefined); // Виведе: undefined
console.log(typeof null); // Виведе: object (особливість мови!)
console.log(typeof Symbol("id")); // Виведе: symbol
console.log(typeof 123n); // Виведе: bigint
console.log(typeof {}); // Виведе: object
console.log(typeof []); // Виведе: object
console.log(typeof function () {}); // Виведе: function

// Add event listener for the button with id 'myFirstButtonId'
document.getElementById("myFirstButtonId").onclick = function(event) {
  event.preventDefault(); // Зупиняє стандартну дію події
  alert("Hello World!");
};
</file>

<file path="lectures/lesson2-Math-Strings-Logical-Operators/exercise2-Guess-the-Number-Game.md">
# Завдання: Гра "Вгадати число"

## Мета гри
Вгадати випадкове число від 1 до 100 за якомога меншу кількість спроб.

## Завдання

1. **HTML**:
   - Створіть форму для введення числа.
   - Додайте секцію для відображення результату.
   - Додайте кнопку для перезапуску гри.

2. **JavaScript**:
   - Згенеруйте випадкове число.
   - Реалізуйте логіку обробки введення користувача:
     - Виведіть підказки: "Занадто мало", "Занадто багато", або "Вгадали!".
     - Відображайте кількість спроб.
   - Додайте обмеження на кількість спроб (максимум 10).
   - У випадку невдачі виведіть повідомлення "Гру закінчено".

3. **Розширення**:
   - Реалізуйте кнопку "Почати заново" для перезапуску гри.
   - Додайте систему балів:
     - Нараховуйте більше балів за меншу кількість спроб.
   - Використовуйте стилізацію для результатів:
     - Зеленим кольором відображайте успіх.
     - Червоним кольором відображайте помилки.

## Навички
- Робота з формами.
- Обробка подій.
- Використання умовних конструкцій та циклів у JavaScript.

## Код прикладу

### HTML
```html
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Guess the Number</title>
</head>
<body>
    <h1>Guess the Number</h1>
    <p>Try to guess the number I'm thinking of between 1 and 100!</p>

    <form id="guessForm">
        <label for="guess">Your Guess:</label>
        <input type="number" id="guess" name="guess" placeholder="Enter your guess" min="1" max="100" required>
        <button type="submit">Submit</button>
    </form>

    <div id="result" style="display: none;">
        <h2>Result</h2>
        <p id="resultText"></p>
    </div>

    <button id="resetGame" style="display: none;">Play Again</button>

    <script src="game.js"></script>
</body>
</html>

JavaScript

// Generate a random number between 1 and 100
const randomNumber = Math.floor(Math.random() * 100) + 1;
let attempts = 0;

document.getElementById("guessForm").onsubmit = function (e) {
    e.preventDefault();
    const guess = parseInt(document.getElementById("guess").value);
    attempts++;

    if (isNaN(guess) || guess < 1 || guess > 100) {
        alert("Please enter a valid number between 1 and 100.");
        return;
    }

    let message = "";
    if (guess < randomNumber) {
        message = `Too low! Try again. Attempts: ${attempts}`;
    } else if (guess > randomNumber) {
        message = `Too high! Try again. Attempts: ${attempts}`;
    } else {
        message = `🎉 Congratulations! You guessed it in ${attempts} attempts!`;
        document.getElementById("resetGame").style.display = "inline";
    }

    document.getElementById("resultText").textContent = message;
    document.getElementById("result").style.display = "block";

    if (attempts >= 10 && guess !== randomNumber) {
        document.getElementById("resultText").textContent = "Game over! You've used all your attempts.";
        document.getElementById("result").style.display = "block";
        document.getElementById("guessForm").style.display = "none";
        document.getElementById("resetGame").style.display = "inline";
    }
};

document.getElementById("resetGame").onclick = function () {
    location.reload();
};
</file>

<file path="lectures/lesson2-Math-Strings-Logical-Operators/lecture2-Math-Strings-Logical-Operators.js">
console.log("Лекція 2: Гра 'Вгадати число'");

// Generate a random number between 1 and 100
const randomNumber = Math.floor(Math.random() * 100) + 1;
let attempts = 0; // To count the number of attempts

document.getElementById("guessForm").onsubmit = function (e) {
    e.preventDefault();

    // Get the user's guess
    const guess = parseInt(document.getElementById("guess").value);
    attempts++;

    // Validate the input
    if (isNaN(guess) || guess < 1 || guess > 100) {
        alert("Please enter a valid number between 1 and 100.");
        return;
    }

    // Check the guess and display the result
    let message = "";
    if (guess < randomNumber) {
        message = `Too low! Try again. Attempts: ${attempts}`;
    } else if (guess > randomNumber) {
        message = `Too high! Try again. Attempts: ${attempts}`;
    } else {
        message = `🎉 Congratulations! You guessed it in ${attempts} attempts!`;
        document.getElementById("resetGame").style.display = "inline";
    }

    // Update the result section
    document.getElementById("resultText").textContent = message;
    document.getElementById("result").style.display = "block";

    // Check for maximum attempts
    if (attempts >= 10 && guess !== randomNumber) {
        document.getElementById("resultText").textContent = "Game over! You've used all your attempts.";
        document.getElementById("result").style.display = "block";
        document.getElementById("guessForm").style.display = "none";
        document.getElementById("resetGame").style.display = "inline";
    }
};

document.getElementById("resetGame").onclick = function () {
    location.reload();
};
</file>

<file path="lectures/lesson3-Functions-Arguments-Parameters-Scope-Return/exercise3-Functions-Arguments-Parameters-Scope-Return.md">
# Вправа 3: Функції, Аргументи, Параметри за замовчуванням, Область видимості та Повернення значень

Ласкаво просимо до третьої вправи курсу вивчення JavaScript! У цій вправі ви будете практикувати роботу з функціями, аргументами, параметрами за замовчуванням, областю видимості та поверненням значень.

## Інструкції

1. Створіть функцію `greeting`, яка виводить у консоль повідомлення "Привіт, світ!".
2. Створіть функцію `greetingWithName`, яка приймає один аргумент `name` та виводить у консоль повідомлення "Привіт, [name]!".
3. Створіть функцію `greetingWithDefaultParameter`, яка приймає один аргумент `name` з параметром за замовчуванням "Світ" та виводить у консоль повідомлення "Привіт, [name]!".
4. Створіть глобальну змінну `globalVariable` зі значенням "Я глобальна" та функцію `showGlobalVariable`, яка виводить значення цієї змінної у консоль.
5. Створіть функцію `localFunction`, яка оголошує локальну змінну `localVariable` зі значенням "Я локальна" та виводить її значення у консоль.
6. Створіть глобальну змінну `variable` зі значенням "Глобальна змінна" та функцію `showVariable`, яка оголошує локальну змінну `variable` зі значенням "Локальна змінна" та виводить її значення у консоль.
7. Створіть функцію `add`, яка приймає два аргументи `a` та `b` і повертає їх суму.
8. Створіть функцію `noReturn`, яка виводить у консоль повідомлення "Ця функція нічого не повертає" та не містить оператора return.

## Приклад

Ось приклад того, як виконати вправу:

```javascript
// Крок 1
function greeting() {
  console.log("Привіт, світ!");
}

greeting(); // Виведе: Привіт, світ!

// Крок 2
function greetingWithName(name) {
  console.log("Привіт, " + name + "!");
}

greetingWithName("Аліса"); // Виведе: Привіт, Аліса!

// Крок 3
function greetingWithDefaultParameter(name = "Світ") {
  console.log("Привіт, " + name + "!");
}

greetingWithDefaultParameter(); // Виведе: Привіт, Світ!
greetingWithDefaultParameter("Боб"); // Виведе: Привіт, Боб!

// Крок 4
var globalVariable = "Я глобальна";

function showGlobalVariable() {
  console.log(globalVariable);
}

showGlobalVariable(); // Виведе: Я глобальна

// Крок 5
function localFunction() {
  let localVariable = "Я локальна";
  console.log(localVariable);
}

localFunction(); // Виведе: Я локальна
// console.log(localVariable); // Викличе помилку, оскільки localVariable не доступна поза функцією

// Крок 6
var variable = "Глобальна змінна";

function showVariable() {
  let variable = "Локальна змінна";
  console.log(variable);
}

showVariable(); // Виведе: Локальна змінна
console.log(variable); // Виведе: Глобальна змінна

// Крок 7
function add(a, b) {
  return a + b;
}

let result = add(5, 3);
console.log(result); // Виведе: 8

// Крок 8
function noReturn() {
  console.log("Ця функція нічого не повертає");
}

let resultNoReturn = noReturn(); // Виведе: Ця функція нічого не повертає
console.log(resultNoReturn); // Виведе: undefined
```

## Висновок

У цій вправі ви практикували роботу з функціями, аргументами, параметрами за замовчуванням, областю видимості та поверненням значень. Ви дізналися, як створювати функції, передавати аргументи, використовувати параметри за замовчуванням, працювати з глобальними та локальними змінними, а також повертати значення з функцій.
</file>

<file path="lectures/lesson3-Functions-Arguments-Parameters-Scope-Return/lecture3-Functions-Arguments-Parameters-Scope-Return.js">
console.log("Лекція 3: Функції, Аргументи, Параметри за замовчуванням, Область видимості та Повернення значень");

// ФУНКЦІЇ
// Функції дозволяють створювати повторно використовувані блоки коду, які можна викликати багаторазово.
// Це сприяє спрощенню структури програми та зменшенню дублювання коду.

console.log("Виклик функції greeting");
function greeting() {
  console.log("Привіт, світ!");
}

greeting(); // Виведе: Привіт, світ!

// АРГУМЕНТИ (ARGUMENTS)
// Аргументи — це значення, які передаються функції під час її виклику.
// Вони дозволяють налаштовувати поведінку функції залежно від переданих даних.

console.log("Виклик функції greetingWithName з аргументом 'Аліса'");
function greetingWithName(name) {
  console.log("Привіт, " + name + "!");
}

greetingWithName("Аліса"); // Виведе: Привіт, Аліса!

// ПАРАМЕТРИ ЗА ЗАМОВЧУВАННЯМ (DEFAULT PARAMETERS)
// Параметри за замовчуванням дозволяють задавати значення для параметрів функції, якщо вони не були передані під час виклику.
// Це забезпечує надійність та запобігає помилкам.

console.log("Виклик функції greetingWithDefaultParameter без аргументів");
function greetingWithDefaultParameter(name = "Світ") {
  console.log("Привіт, " + name + "!");
}

greetingWithDefaultParameter(); // Виведе: Привіт, Світ!
greetingWithDefaultParameter("Боб"); // Виведе: Привіт, Боб!

// ОБЛАСТЬ ВИДИМОСТІ
// ГЛОБАЛЬНА ОБЛАСТЬ ВИДИМОСТІ (GLOBAL SCOPE)
// Змінні, оголошені поза функціями (var), мають глобальну область видимості. Вони доступні для використання у будь-якій частині програми.

var globalVariable = "Я глобальна";

console.log("Виклик функції showGlobalVariable");
function showGlobalVariable() {
  console.log(globalVariable);
}

showGlobalVariable(); // Виведе: Я глобальна

// ЛОКАЛЬНА ОБЛАСТЬ ВИДИМОСТІ (LOCAL SCOPE)
// Змінні, оголошені всередині функції (let), мають локальну область видимості. Вони доступні лише в межах цієї функції та зникають після її завершення.

console.log("Виклик функції localFunction");
function localFunction() {
  let localVariable = "Я локальна";
  console.log(localVariable);
}

localFunction(); // Виведе: Я локальна
// console.log(localVariable); // Викличе помилку, оскільки localVariable не доступна поза функцією

// ГЛОБАЛЬНА VS ЛОКАЛЬНА ОБЛАСТЬ ВИДИМОСТІ У ФУНКЦІЯХ (GLOBAL VS LOCAL SCOPE IN FUNCTIONS)
// Коли у функції є змінні з однаковою назвою, що існують у глобальній і локальній області, пріоритет має локальна змінна.

var variable = "Глобальна змінна";

console.log("Виклик функції showVariable");
function showVariable() {
  let variable = "Локальна змінна";
  console.log(variable);
}

showVariable(); // Виведе: Локальна змінна
console.log(variable); // Виведе: Глобальна змінна

// ПОВЕРНЕННЯ ЗНАЧЕННЯ З ФУНКЦІЇ (RETURN A VALUE FROM A FUNCTION)
// Функції можуть повертати значення за допомогою оператора return. Це значення можна використовувати поза межами функції для подальших обчислень або дій.

console.log("Виклик функції add з аргументами 5 і 3");
function add(a, b) {
  return a + b;
}

let result = add(5, 3);
console.log(result); // Виведе: 8

// Функції, які не містять оператора return, повертають undefined за замовчуванням. Це вказує на відсутність повернутого значення.

console.log("Виклик функції noReturn");
function noReturn() {
  console.log("Ця функція нічого не повертає");
}

let resultNoReturn = noReturn(); // Виведе: Ця функція нічого не повертає
console.log(resultNoReturn); // Виведе: undefined
</file>

<file path="lectures/lesson4-Arrays-Loops/exercise4-Arrays-Loops.md">
# Вправа 4: Масиви та Цикли в JavaScript

Ласкаво просимо до четвертої вправи курсу вивчення JavaScript! У цій вправі ви будете практикувати роботу з масивами та циклами, включаючи вкладені масиви, доступ до даних масиву, зміну даних масиву, доступ до багатовимірних масивів та різні типи циклів.

## Інструкції

1. Створіть вкладений масив `nestedArray` з трьох підмасивів, кожен з яких містить три числа. Виведіть значення другого елемента першого підмасиву у консоль.
2. Створіть масив `array` з п'яти чисел. Виведіть значення третього елемента масиву у консоль.
3. Змініть значення третього елемента масиву `array` на 35. Виведіть нове значення у консоль.
4. Створіть багатовимірний масив `multiDimensionalArray` з трьох підмасивів, кожен з яких містить три числа. Виведіть значення третього елемента другого підмасиву у консоль.
5. Створіть цикл `while`, який виводить числа від 0 до 4 у консоль.
6. Створіть цикл `do...while`, який виводить числа від 0 до 4 у консоль.
7. Створіть цикл `for`, який виводить числа від 0 до 4 у консоль.
8. Створіть масив `iterableArray` з п'яти чисел. Використовуйте цикл `for...of` для виведення кожного елемента масиву у консоль.
9. Створіть об'єкт `object` з трьома властивостями. Використовуйте цикл `for...in` для виведення кожної властивості об'єкта у консоль.
10. Створіть масив `fruits` з елементами "яблуко" та "банан". Використовуйте метод `push()` для додавання "апельсин" до кінця масиву. Виведіть новий масив у консоль.
11. Використовуйте метод `pop()` для видалення останнього елемента з масиву `fruits`. Виведіть видалений елемент та новий масив у консоль.
12. Використовуйте метод `shift()` для видалення першого елемента з масиву `fruits`. Виведіть видалений елемент та новий масив у консоль.
13. Використовуйте метод `unshift()` для додавання "яблуко" на початок масиву `fruits`. Виведіть новий масив у консоль.
14. Створіть масив `numbers` з елементами 1, 2, 3, 4. Використовуйте метод `map()` для створення нового масиву, де кожен елемент подвоєний. Виведіть новий масив у консоль.
15. Використовуйте метод `filter()` для створення нового масиву з елементами масиву `numbers`, які є парними. Виведіть новий масив у консоль.
16. Використовуйте метод `reduce()` для обчислення суми елементів масиву `numbers`. Виведіть результат у консоль.

## Приклад

Ось приклад того, як виконати вправу:

```javascript
// Крок 1
let nestedArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(nestedArray[0][1]); // Виведе: 2

// Крок 2
let array = [10, 20, 30, 40, 50];
console.log(array[2]); // Виведе: 30

// Крок 3
array[2] = 35;
console.log(array[2]); // Виведе: 35

// Крок 4
let multiDimensionalArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(multiDimensionalArray[1][2]); // Виведе: 6

// Крок 5
let i = 0;
while (i < 5) {
  console.log("Цикл while: " + i);
  i++;
}

// Крок 6
let j = 0;
do {
  console.log("Цикл do...while: " + j);
  j++;
} while (j < 5);

// Крок 7
for (let k = 0; k < 5; k++) {
  console.log("Цикл for: " + k);
}

// Крок 8
let iterableArray = [10, 20, 30, 40, 50];
for (let value of iterableArray) {
  console.log("Цикл for...of: " + value);
}

// Крок 9
let object = {a: 1, b: 2, c: 3};
for (let key in object) {
  console.log("Цикл for...in: " + key + " = " + object[key]);
}

// Крок 10
let fruits = ["яблуко", "банан"];
fruits.push("апельсин");
console.log(fruits); // ["яблуко", "банан", "апельсин"]

// Крок 11
let lastFruit = fruits.pop();
console.log(lastFruit); // "апельсин"
console.log(fruits); // ["яблуко", "банан"]

// Крок 12
let firstFruit = fruits.shift();
console.log(firstFruit); // "яблуко"
console.log(fruits); // ["банан"]

// Крок 13
fruits.unshift("яблуко");
console.log(fruits); // ["яблуко", "банан"]

// Крок 14
let numbers = [1, 2, 3, 4];
let doubled = numbers.map(function(num) {
  return num * 2;
});
console.log(doubled); // [2, 4, 6, 8]

// Крок 15
let evenNumbers = numbers.filter(function(num) {
  return num % 2 === 0;
});
console.log(evenNumbers); // [2, 4]

// Крок 16
let sum = numbers.reduce(function(total, num) {
  return total + num;
}, 0);
console.log(sum); // 10
```

## Висновок

У цій вправі ви практикували роботу з масивами та циклами, включаючи вкладені масиви, доступ до даних масиву, зміну даних масиву, доступ до багатовимірних масивів та різні типи циклів. Ви дізналися, як використовувати ці концепції для виконання різних завдань у JavaScript.
</file>

<file path="lectures/lesson4-Arrays-Loops/lecture4-Arrays-Loops.js">
console.log("Лекція 4: Масиви та Цикли в JavaScript");

// ВКЛАДЕНІ МАСИВИ (NEST ARRAYS)
// Масиви можуть містити інші масиви як свої елементи, утворюючи багатовимірні структури.
// Це зручно для представлення таблиць, матриць або складних даних.

let nestedArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(nestedArray[0][1]); // Виведе: 2

// ДОСТУП ДО ДАНИХ МАСИВУ (ACCESS ARRAY DATA)
// Елементи масиву доступні за їх індексами, починаючи з нуля.
// Це дозволяє отримувати або використовувати значення, які зберігаються в масиві.

let array = [10, 20, 30, 40, 50];
console.log(array[2]); // Виведе: 30

// ЗМІНА ДАНИХ МАСИВУ (MODIFY ARRAY DATA)
// Елементи масиву можуть бути змінені шляхом присвоєння нового значення за індексом.
// Це дозволяє оновлювати інформацію без створення нового масиву.

array[2] = 35;
console.log(array[2]); // Виведе: 35

// ДОСТУП ДО БАГАТОВИМІРНИХ МАСИВІВ (ACCESS MULTI-DIMENSIONAL ARRAYS)
// Для доступу до елементів вкладених масивів використовується кілька індексів.
// Перший індекс вказує на масив, а другий — на елемент у цьому вкладеному масиві.

let multiDimensionalArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(multiDimensionalArray[1][2]); // Виведе: 6

// ОСНОВНІ МЕТОДИ

// push() додає один або кілька елементів до кінця масиву.
let fruits = ["яблуко", "банан"];
fruits.push("апельсин");
console.log(fruits); // ["яблуко", "банан", "апельсин"]

// pop() видаляє останній елемент з масиву і повертає його.
let lastFruit = fruits.pop();
console.log(lastFruit); // "апельсин"
console.log(fruits); // ["яблуко", "банан"]

// shift() видаляє перший елемент масиву, а решта елементів зсуваються на одну позицію вліво.
let firstFruit = fruits.shift();
console.log(firstFruit); // "яблуко"
console.log(fruits); // ["банан"]

// unshift() додає один або кілька елементів на початок масиву, зсуваючи всі інші елементи вправо.
fruits.unshift("яблуко");
console.log(fruits); // ["яблуко", "банан"]

// ІТЕРАЦІЙНІ МЕТОДИ МАСИВІВ

// map() створює новий масив з результатами виклику заданої функції для кожного елемента масиву.
let numbers = [1, 2, 3, 4];
let doubled = numbers.map(function(num) {
  return num * 2;
});
console.log(doubled); // [2, 4, 6, 8]

// filter() створює новий масив з усіма елементами, які пройшли перевірку, задану у функції.
let evenNumbers = numbers.filter(function(num) {
  return num % 2 === 0;
});
console.log(evenNumbers); // [2, 4]

// reduce() застосовує функцію до кожного елемента масиву (зліва направо), щоб звести його до одного значення.
let sum = numbers.reduce(function(total, num) {
  return total + num;
}, 0);
console.log(sum); // 10

// ЦИКЛИ (LOOPS)
// Цикли у JavaScript використовуються для виконання повторюваних дій, таких як обхід масивів або виконання коду до досягнення певної умови.

// Цикл while
// Виконує код доти, доки задана умова залишається істинною. Якщо умова стає хибною, виконання циклу припиняється.

let i = 0;
while (i < 5) {
  console.log("Цикл while: " + i);
  i++;
}

// Цикл do...while
// Виконує код хоча б один раз, незалежно від умови, і перевіряє її лише після виконання першої ітерації.

let j = 0;
do {
  console.log("Цикл do...while: " + j);
  j++;
} while (j < 5);

// Цикл for
// Цикл із визначеною кількістю ітерацій, що включає ініціалізацію, перевірку умови і оновлення змінних у кожній ітерації.

for (let k = 0; k < 5; k++) {
  console.log("Цикл for: " + k);
}

// Цикл for...of
// Використовується для ітерації по елементах масивів або інших ітеративних об’єктів, забезпечуючи зручний доступ до значень.

let iterableArray = [10, 20, 30, 40, 50];
for (let value of iterableArray) {
  console.log("Цикл for...of: " + value);
}

// Цикл for...in
// Ітерація по ключах об’єкта, що дозволяє працювати з усіма його властивостями.

let object = {a: 1, b: 2, c: 3};
for (let key in object) {
  console.log("Цикл for...in: " + key + " = " + object[key]);
}
</file>

<file path="lectures/lesson5-Algorithms/geojson/geojson.json">
{
  "type": "FeatureCollection",
  "features": [
    {
      "type": "Feature",
      "properties": {
        "name": "Львівська копальня кави"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0322, 49.8415]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Дзиґа"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0298, 49.8409]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Вірменка"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0335, 49.8407]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Світ кави"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0305, 49.8412]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Кафе 1"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0315, 49.8418]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Золотий дукат"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0328, 49.8410]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Під синьою пляшкою"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0330, 49.8413]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Чорна кішка"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0295, 49.8405]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Білка"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0325, 49.8416]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Альтернативна кава"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0310, 49.8408]
      }
    },
    {
      "type": "Feature",
      "properties": {
        "name": "Турист"
      },
      "geometry": {
        "type": "Point",
        "coordinates": [24.0320, 49.8411]
      }
    }
  ]
}
</file>

<file path="lectures/lesson5-BlackJack-OOP/activity_diagram.puml">
@startuml
|User|
start
    :Game starts;

|Game|
repeat
    :Ask User to decide action (Hit or Stand)?;
    if (User chooses Hit?) then (yes)
        |Player|
        :Draw a card;
        :Calculate Player score;
        |Game|
        
        if (Player score > 21?) then (yes)
            :Player Busts;
            stop
        endif
    else (no)
        |Player|
        :Player Stands;
    endif
    |Game|
repeat while (User chooses Hit?)

|Dealer|
repeat
    :Dealer draws a card;
    :Calculate Dealer score;
    |Game|
repeat while (Dealer total < 17?)

|Game|
if (Dealer score > 21?) then (yes)
    :Player wins (Dealer Busts);
    stop
endif

:Compare Player and Dealer scores;
if (Player score > Dealer score?) then (yes)
    :Player wins;
else
    if (Player score < Dealer score?) then (yes)
        :Dealer wins;
    else
        :Game is a tie (Push);
    endif
endif
stop
@enduml
</file>

<file path="lectures/lesson5-BlackJack-OOP/sequence_diagram.puml">
@startuml
participant User
participant Game
participant Player
participant Dealer

User -> Game: Start game
Game -> User: Ask to decide (Hit or Stand)

loop While User chooses Hit
    User -> Game: Hit
    Game -> Player: Draw a card
    Player -> Player: Calculate Player score
    Player -> Game: Return Player score
    Game -> Game: Check if Player busts

    alt Player Busts
        Game -> User: Player losesы
        return
    elseыыы
        Game -> User: Ask again (Hit or Stand)
    end
end

User -> Game: Stand
Game -> Player: Player stands

loop While Dealer score < 17
    Game -> Dealer: Draw a card
    Dealer -> Dealer: Calculate Dealer score
    Dealer -> Game: Return Dealer scoreыы
end

alt Dealer Busts
    Game -> User: Player wins
else
    Game -> Game: Compare Player and Dealer scores
    alt Player score > Dealer score
        Game -> User: Player wins
    else Player score < Dealer score
        Game -> User: Dealer wins
    else Player score == Dealer score
        Game -> User: Game is a tie (Push)
    end
end

@enduml
</file>

<file path="lectures/lesson6-Cryptocurrencies-Blockchain/exercise6-Encrypting-Messages.md">
# Практичне заняття: Шифрування повідомлень

## Мета

📌 Мета: навчити учнів основам шифрування та дешифрування повідомлень за допомогою простого алгоритму.

## Умова завдання

Уявіть, що ви хочете передати секретне повідомлення своєму другові. Для цього вам потрібно зашифрувати повідомлення за допомогою ключа, а потім дешифрувати його, щоб ваш друг міг прочитати.

## Вхідні дані

- Повідомлення, яке потрібно зашифрувати.
- Ключ для шифрування та дешифрування.

```javascript
const key = 'hello Its my key';
const msg = 'hello World';
```

## Вимоги до програми

✅ Написати функцію для шифрування повідомлення за допомогою ключа.

✅ Написати функцію для дешифрування повідомлення за допомогою ключа.

✅ Вивести зашифроване та дешифроване повідомлення у консоль.

## Приклад рішення

```javascript
function encryptMsg(msg, key) {
    const msgChars = msg.split('');
    const msgASCI = msgChars.map(item => item.charCodeAt(0));

    const keyASCI = key.split('').map(item => item.charCodeAt(0));
    const encryptedMsgASCI = msgASCI.map((value, index) => value + keyASCI[index]);
    const encryptedMsg = encryptedMsgASCI
      .map(value => String.fromCharCode(value))
      .join('');
    return encryptedMsg;
}

function decryptMsg(msg, key) {
    const msgChars = msg.split('');
    const msgASCI = msgChars.map(item => item.charCodeAt(0));

    const keyASCI = key.split('').map(item => item.charCodeAt(0));
    const decryptedMsgASCI = msgASCI.map((value, index) => value - keyASCI[index]);
    const decryptedMsg = decryptedMsgASCI
      .map(value => String.fromCharCode(value))
      .join('');

    return decryptedMsg;
}

const encryptedMsg = encryptMsg(msg, key);
const decryptedMsg = decryptMsg(encryptedMsg, key);
console.log(encryptedMsg);
console.log(decryptedMsg);
```

## Візуалізація на графіку

📍 Повідомлення "hello World" шифрується за допомогою ключа "hello Its my key".
🔐 Зашифроване повідомлення виводиться у консоль.
🔓 Дешифроване повідомлення виводиться у консоль.

## Додаткові ідеї

- Розширений варіант: використання більш складних алгоритмів шифрування, таких як AES або RSA.
- Ускладнений варіант: створення графічного інтерфейсу для шифрування та дешифрування повідомлень.

Такий підхід навчить дітей основам шифрування та дешифрування повідомлень, а також покаже, як можна застосувати ці знання у реальному житті! 🚀
</file>

<file path="lectures/lesson6-Cryptocurrencies-Blockchain/questions.csv">
Питання,Варіант 1 (вірний),Варіант 2,Варіант 3,Варіант 4
Що таке криптовалюта?,Цифрова валюта,Фіатна валюта,Акція,Облігація
Що таке блокчейн?,Розподілений реєстр,Централізована база даних,Файл,Програма
Хто створив Bitcoin?,Сатоші Накамото,Елвін Рот,Віталік Бутерін,Чарлі Лі
Що таке майнінг?,Процес створення нових блоків,Процес видобутку корисних копалин,Процес торгівлі криптовалютами,Процес зберігання криптовалют
Що таке смарт-контракт?,Самовиконуваний контракт,Паперовий контракт,Усна угода,Електронний лист
Що таке Ethereum?,Платформа для смарт-контрактів,Криптовалюта,Банк,Біржа
Що таке Proof of Work?,Алгоритм консенсусу,Алгоритм шифрування,Алгоритм пошуку,Алгоритм сортування
Що таке Proof of Stake?,Алгоритм консенсусу,Алгоритм шифрування,Алгоритм пошуку,Алгоритм сортування
Що таке децентралізація?,Відсутність центрального контролю,Централізоване управління,Монополія,Олігополія
Що таке криптографія?,Наука про шифрування,Наука про криптовалюти,Наука про блокчейн,Наука про майнінг
Що таке хеш-функція?,Функція для шифрування даних,Функція для пошуку даних,Функція для сортування даних,Функція для зберігання даних
Що таке Bitcoin?,Перша криптовалюта,Фіатна валюта,Акція,Облігація
Що таке блок?,Елемент блокчейну,Елемент бази даних,Елемент файлу,Елемент програми
Що таке транзакція?,Операція з криптовалютою,Операція з фіатною валютою,Операція з акціями,Операція з облігаціями
Що таке гаманець?,Програмне забезпечення для зберігання криптовалют,Програмне забезпечення для торгівлі криптовалютами,Програмне забезпечення для майнінгу,Програмне забезпечення для шифрування
Що таке приватний ключ?,Секретний ключ для доступу до криптовалют,Публічний ключ для доступу до криптовалют,Ключ для шифрування даних,Ключ для пошуку даних
Що таке публічний ключ?,Ключ для перевірки підпису,Секретний ключ для доступу до криптовалют,Ключ для шифрування даних,Ключ для пошуку даних
Що таке цифровий підпис?,Підпис для перевірки автентичності,Підпис для шифрування даних,Підпис для пошуку даних,Підпис для сортування даних
Що таке блокчейн-мережа?,Мережа вузлів для перевірки транзакцій,Мережа комп'ютерів для майнінгу,Мережа користувачів для торгівлі,Мережа програм для шифрування
Що таке консенсус?,Узгодженість між учасниками мережі,Розбіжність між учасниками мережі,Конфлікт між учасниками мережі,Співпраця між учасниками мережі
Що таке вузол?,Комп'ютер у блокчейн-мережі,Користувач у блокчейн-мережі,Програма у блокчейн-мережі,Файл у блокчейн-мережі
Що таке майнер?,Учасник, який створює нові блоки,Учасник, який торгує криптовалютами,Учасник, який зберігає криптовалюти,Учасник, який шифрує дані
Що таке блокчейн-адреса?,Адреса для отримання криптовалют,Адреса для відправки криптовалют,Адреса для зберігання криптовалют,Адреса для шифрування даних
Що таке ICO?,Первинна пропозиція монет,Первинна пропозиція акцій,Первинна пропозиція облігацій,Первинна пропозиція фіатної валюти
Що таке токен?,Цифровий актив,Фіатна валюта,Акція,Облігація
Що таке децентралізована біржа?,Біржа без центрального контролю,Біржа з центральним контролем,Біржа для фіатних валют,Біржа для акцій
Що таке форк?,Розгалуження блокчейну,Злиття блокчейну,Видалення блокчейну,Оновлення блокчейну
Що таке хардфорк?,Розгалуження з несумісними змінами,Розгалуження з сумісними змінами,Злиття блокчейну,Видалення блокчейну
Що таке софтфорк?,Розгалуження з сумісними змінами,Розгалуження з несумісними змінами,Злиття блокчейну,Видалення блокчейну
Що таке Lightning Network?,Мережа для швидких транзакцій,Мережа для майнінгу,Мережа для шифрування,Мережа для зберігання даних
Що таке DeFi?,Децентралізовані фінанси,Централізовані фінанси,Фіатні фінанси,Криптографічні фінанси
Що таке stablecoin?,Стабільна криптовалюта,Волатильна криптовалюта,Фіатна валюта,Акція
Що таке NFT?,Невзаємозамінний токен,Фіатна валюта,Акція,Облігація
Що таке DAO?,Децентралізована автономна організація,Централізована автономна організація,Фіатна організація,Криптографічна організація
Що таке криптовалютна біржа?,Платформа для торгівлі криптовалютами,Платформа для зберігання криптовалют,Платформа для майнінгу,Платформа для шифрування
Що таке криптовалютний гаманець?,Програмне забезпечення для зберігання криптовалют,Програмне забезпечення для торгівлі криптовалютами,Програмне забезпечення для майнінгу,Програмне забезпечення для шифрування
Що таке криптовалютний обмінник?,Сервіс для обміну криптовалют,Сервіс для зберігання криптовалют,Сервіс для майнінгу,Сервіс для шифрування
Що таке криптовалютний портфель?,Набір криптовалют,Набір фіатних валют,Набір акцій,Набір облігацій
Що таке криптовалютний ринок?,Ринок для торгівлі криптовалютами,Ринок для зберігання криптовалют,Ринок для майнінгу,Ринок для шифрування
Що таке криптовалютний трейдинг?,Торгівля криптовалютами,Зберігання криптовалют,Майнінг криптовалют,Шифрування криптовалют
Що таке криптовалютний індекс?,Індекс вартості криптовалют,Індекс вартості фіатних валют,Індекс вартості акцій,Індекс вартості облігацій
Що таке криптовалютний фонд?,Фонд для інвестування в криптовалюти,Фонд для інвестування в фіатні валюти,Фонд для інвестування в акції,Фонд для інвестування в облігації
Що таке криптовалютний арбітраж?,Арбітраж між різними біржами,Арбітраж між різними фіатними валютами,Арбітраж між різними акціями,Арбітраж між різними облігаціями
Що таке криптовалютний бот?,Програма для автоматичної торгівлі,Програма для зберігання криптовалют,Програма для майнінгу,Програма для шифрування
Що таке криптовалютний хешрейт?,Швидкість обчислень у мережі,Швидкість транзакцій у мережі,Швидкість зберігання даних у мережі,Швидкість шифрування даних у мережі
Що таке криптовалютний пул?,Група майнерів,Група трейдерів,Група зберігачів,Група шифрувальників
Що таке криптовалютний вузол?,Комп'ютер у мережі,Користувач у мережі,Програма у мережі,Файл у мережі
Що таке криптовалютний консенсус?,Узгодженість між учасниками мережі,Розбіжність між учасниками мережі,Конфлікт між учасниками мережі,Співпраця між учасниками мережі
</file>

<file path="lectures/lesson6-DOM-Basics/DOM-Questions.csv">
Питання, відповідь1, відповідь2, відповідь3, відповідь4
Що означає DOM?,Модель об'єктів документа,Модель даних об'єкта,Документ орієнтована модель,Модель орієнтована на дані
Яка мета DOM?,Представляти структуру веб-документа,Стилізувати веб-сторінки,Зберігати дані,Керувати сесіями користувачів
Який метод використовується для вибору елемента за його ID?,getElementById,querySelector,getElementsByClassName,getElementsByTagName
Який метод використовується для вибору елементів за їх класом?,getElementsByClassName,getElementById,querySelector,getElementsByTagName
Який метод використовується для вибору елементів за їх тегом?,getElementsByTagName,getElementById,querySelector,getElementsByClassName
Який метод використовується для вибору першого елемента, що відповідає CSS-селектору?,querySelector,getElementById,getElementsByClassName,getElementsByTagName
Який метод використовується для вибору всіх елементів, що відповідають CSS-селектору?,querySelectorAll,getElementById,getElementsByClassName,getElementsByTagName
Як змінити текстовий вміст елемента?,textContent,innerHTML,outerHTML,value
Як змінити HTML-вміст елемента?,innerHTML,textContent,outerHTML,value
Як додати новий елемент до DOM?,createElement,removeChild,getElementById,querySelector
Як видалити елемент з DOM?,removeChild,createElement,getElementById,querySelector
Як додати слухача подій до елемента?,addEventListener,removeEventListener,createElement,querySelector
Як видалити слухача подій з елемента?,removeEventListener,addEventListener,createElement,querySelector
Як отримати значення атрибута елемента?,getAttribute,setAttribute,removeAttribute,hasAttribute
Як встановити значення атрибута елемента?,setAttribute,getAttribute,removeAttribute,hasAttribute
Як видалити атрибут з елемента?,removeAttribute,getAttribute,setAttribute,hasAttribute
Як перевірити, чи має елемент певний атрибут?,hasAttribute,getAttribute,setAttribute,removeAttribute
Як змінити інлайн-стилі елемента?,style,classList,setAttribute,getAttribute
Як додати клас до елемента?,classList.add,classList.remove,classList.toggle,classList.contains
Як видалити клас з елемента?,classList.remove,classList.add,classList.toggle,classList.contains
Як перемикати клас на елементі?,classList.toggle,classList.add,classList.remove,classList.contains
Як перевірити, чи має елемент певний клас?,classList.contains,classList.add,classList.remove,classList.toggle
Як отримати батьківський елемент?,parentNode,childNodes,nextSibling,previousSibling
Як отримати дочірні вузли елемента?,childNodes,parentNode,nextSibling,previousSibling
Як отримати наступний сусідній вузол елемента?,nextSibling,parentNode,childNodes,previousSibling
</file>

<file path="lectures/lesson6-DOM-Basics/exercise6-DOM-Basics.md">
# Вправа 5: Основи роботи з DOM (DOM Basics)

Ласкаво просимо до п'ятої вправи курсу вивчення JavaScript! У цій вправі ви будете практикувати основи роботи з DOM, включаючи доступ до елементів, зміну вмісту, додавання та видалення елементів, а також обробку подій.

## Інструкції

1. **Доступ до елементів**:
   - Створіть HTML файл з елементами, до яких ви будете отримувати доступ.
   - Використовуйте методи `document.querySelector`, `document.querySelectorAll`, `getElementById`, `getElementsByClassName` та `getElementsByTagName` для доступу до елементів.
   - Виведіть вибрані елементи у консоль.

2. **Зміна вмісту**:
   - Використовуйте властивості `innerHTML` та `textContent` для зміни вмісту елементів.
   - Створіть функцію, яка змінює вміст елемента за допомогою `innerHTML`.
   - Створіть функцію, яка змінює текстовий вміст елемента за допомогою `textContent`.

3. **Додавання та видалення елементів**:
   - Використовуйте методи `createElement`, `appendChild` та `removeChild` для додавання та видалення елементів.
   - Створіть функцію, яка додає новий елемент до існуючого.
   - Створіть функцію, яка видаляє елемент зі сторінки.

4. **Обробка подій**:
   - Використовуйте метод `addEventListener` для додавання обробників подій до елементів.
   - Створіть кнопку, яка викликає функцію при натисканні.
   - Створіть обробник подій для зміни стилю елемента при наведенні миші.

## Приклад

Ось приклад того, як виконати вправу:

### HTML

```html
<!DOCTYPE html>
<html lang="uk">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Основи роботи з DOM</title>
    <script src="exercise5.js" defer></script>
</head>
<body>
    <h1 id="header">Заголовок</h1>
    <p class="text">Це абзац.</p>
    <div id="container"></div>
    <button id="myButton">Натисніть мене</button>
</body>
</html>
```

### JavaScript

```javascript
// Доступ до елементів
const header = document.getElementById('header');
const paragraphs = document.getElementsByClassName('text');
const container = document.querySelector('#container');
const button = document.querySelectorAll('button');

console.log(header);
console.log(paragraphs);
console.log(container);
console.log(button);

// Зміна вмісту
function changeInnerHTML() {
    container.innerHTML = '<p>Новий вміст контейнера</p>';
}

function changeTextContent() {
    header.textContent = 'Новий заголовок';
}

// Додавання та видалення елементів
function addElement() {
    const newElement = document.createElement('div');
    newElement.textContent = 'Новий елемент';
    container.appendChild(newElement);
}

function removeElement() {
    const elementToRemove = container.querySelector('div');
    if (elementToRemove) {
        container.removeChild(elementToRemove);
    }
}

// Обробка подій
button[0].addEventListener('click', changeInnerHTML);
header.addEventListener('mouseover', function() {
    header.style.color = 'red';
});
header.addEventListener('mouseout', function() {
    header.style.color = 'black';
});
```

## Висновок

У цій вправі ви практикували основи роботи з DOM, включаючи доступ до елементів, зміну вмісту, додавання та видалення елементів, а також обробку подій. Ви дізналися, як використовувати ці концепції для створення динамічних та інтерактивних веб-сторінок.
</file>

<file path="lectures/lesson7-Objects/exercise7-Objects.md">
# Вправа 6: Створення та маніпуляція об’єктами в JavaScript

Ласкаво просимо до шостої вправи курсу вивчення JavaScript! У цій вправі ви будете практикувати створення та маніпуляцію об’єктами, включаючи створення об’єктів, доступ до властивостей, оновлення значень та роботу з вкладеними об’єктами.

## Інструкції

1. Створіть об’єкт `person` з властивостями `name`, `age` та `city`. Виведіть значення властивості `name` у консоль.
2. Оновіть значення властивості `age` об’єкта `person` на 35. Виведіть нове значення у консоль.
3. Додайте нову властивість `isEmployed` до об’єкта `person` зі значенням `true`. Виведіть значення нової властивості у консоль.
4. Видаліть властивість `city` з об’єкта `person`. Спробуйте вивести значення видаленої властивості у консоль.
5. Створіть вкладений об’єкт `student` з властивостями `name`, `grades` (масив чисел) та `contact` (об’єкт з властивостями `email` та `phone`). Виведіть значення властивості `email` у консоль.

## Приклад

Ось приклад того, як виконати вправу:

```javascript
// Крок 1
const person = {
  name: "Олександр",
  age: 30,
  city: "Львів"
};

console.log(person.name); // Виведе: Олександр

// Крок 2
person.age = 35;
console.log(person.age); // Виведе: 35

// Крок 3
person.isEmployed = true;
console.log(person.isEmployed); // Виведе: true

// Крок 4
delete person.city;
console.log(person.city); // Виведе: undefined

// Крок 5
const student = {
  name: "Анна",
  grades: [90, 85, 88],
  contact: {
    email: "anna@example.com",
    phone: "+380123456789"
  }
};

console.log(student.contact.email); // Виведе: anna@example.com
```

## Висновок

У цій вправі ви практикували створення та маніпуляцію об’єктами, включаючи створення об’єктів, доступ до властивостей, оновлення значень та роботу з вкладеними об’єктами. Ви дізналися, як використовувати ці концепції для роботи з об’єктами у JavaScript.
</file>

<file path="lectures/lessons-PivotTabales/expenses_full.csv">
Учень,День тижня,Група витрат,Стаття витрат,Сума
Максим,Понеділок,Різне,Вода/Закуски,55
Максим,Понеділок,Проживання,Готель,750
Максим,Понеділок,Розваги,Розваги,107
Максим,Вівторок,Харчування,Сніданок,273
Максим,Вівторок,Різне,Вода/Закуски,89
Максим,Вівторок,Проживання,Готель,589
Максим,Середа,Екскурсії,Екскурсія,115
Максим,Середа,Харчування,Вечеря,247
Максим,Середа,Проживання,Готель,723
Максим,Четвер,Харчування,Сніданок,106
Максим,Четвер,Екскурсії,Екскурсія,387
Максим,Четвер,Різне,Вода/Закуски,45
Максим,П'ятниця,Різне,Вода/Закуски,73
Максим,П'ятниця,Розваги,Розваги,106
Максим,П'ятниця,Екскурсії,Екскурсія,329
Максим,Субота,Екскурсії,Екскурсія,488
Максим,Субота,Харчування,Обід,281
Максим,Субота,Проживання,Готель,1214
Максим,Неділя,Харчування,Вечеря,279
Максим,Неділя,Харчування,Обід,310
Максим,Неділя,Різне,Вода/Закуски,63
Назар,Понеділок,Проживання,Готель,599
Назар,Понеділок,Розваги,Розваги,141
Назар,Понеділок,Харчування,Вечеря,376
Назар,Вівторок,Екскурсії,Екскурсія,473
Назар,Вівторок,Харчування,Обід,435
Назар,Вівторок,Проживання,Готель,1049
Назар,Середа,Проживання,Готель,1065
Назар,Середа,Харчування,Вечеря,350
Назар,Середа,Розваги,Розваги,142
Назар,Четвер,Екскурсії,Екскурсія,123
Назар,Четвер,Харчування,Сніданок,269
Назар,Четвер,Проживання,Готель,733
Назар,П'ятниця,Розваги,Розваги,109
Назар,П'ятниця,Харчування,Обід,251
Назар,П'ятниця,Проживання,Готель,889
Назар,Субота,Харчування,Обід,283
Назар,Субота,Харчування,Вечеря,389
Назар,Субота,Розваги,Розваги,140
Назар,Неділя,Харчування,Сніданок,279
Назар,Неділя,Різне,Вода/Закуски,29
Назар,Неділя,Харчування,Обід,287
Єгор,Понеділок,Екскурсії,Екскурсія,183
Єгор,Понеділок,Різне,Вода/Закуски,79
Єгор,Понеділок,Харчування,Сніданок,197
Єгор,Вівторок,Харчування,Обід,312
Єгор,Вівторок,Різне,Вода/Закуски,61
Єгор,Вівторок,Екскурсії,Екскурсія,493
Єгор,Середа,Розваги,Розваги,58
Єгор,Середа,Проживання,Готель,1324
Єгор,Середа,Харчування,Сніданок,180
Єгор,Четвер,Харчування,Вечеря,308
Єгор,Четвер,Харчування,Обід,490
Єгор,Четвер,Проживання,Готель,1397
Єгор,П'ятниця,Різне,Вода/Закуски,83
Єгор,П'ятниця,Харчування,Обід,402
Єгор,П'ятниця,Харчування,Сніданок,264
Єгор,Субота,Харчування,Вечеря,271
Єгор,Субота,Харчування,Сніданок,163
Єгор,Субота,Харчування,Обід,487
Єгор,Неділя,Екскурсії,Екскурсія,319
Єгор,Неділя,Харчування,Обід,498
Єгор,Неділя,Розваги,Розваги,152
Надія,Понеділок,Харчування,Обід,460
Надія,Понеділок,Харчування,Сніданок,226
Надія,Понеділок,Різне,Вода/Закуски,31
Надія,Вівторок,Розваги,Розваги,89
Надія,Вівторок,Проживання,Готель,1142
Надія,Вівторок,Різне,Вода/Закуски,40
Надія,Середа,Розваги,Розваги,66
Надія,Середа,Різне,Вода/Закуски,69
Надія,Середа,Харчування,Вечеря,395
Надія,Четвер,Екскурсії,Екскурсія,228
Надія,Четвер,Харчування,Вечеря,483
Надія,Четвер,Розваги,Розваги,52
Надія,П'ятниця,Різне,Вода/Закуски,88
Надія,П'ятниця,Розваги,Розваги,118
Надія,П'ятниця,Проживання,Готель,1287
Надія,Субота,Різне,Вода/Закуски,57
Надія,Субота,Харчування,Обід,422
Надія,Субота,Проживання,Готель,661
Надія,Неділя,Харчування,Вечеря,456
Надія,Неділя,Проживання,Готель,1280
Надія,Неділя,Харчування,Обід,291
Софія,Понеділок,Екскурсії,Екскурсія,427
Софія,Понеділок,Проживання,Готель,1019
Софія,Понеділок,Харчування,Обід,301
Софія,Вівторок,Харчування,Сніданок,238
Софія,Вівторок,Харчування,Обід,471
Софія,Вівторок,Розваги,Розваги,50
Софія,Середа,Екскурсії,Екскурсія,109
Софія,Середа,Харчування,Обід,257
Софія,Середа,Харчування,Вечеря,385
Софія,Четвер,Розваги,Розваги,64
Софія,Четвер,Харчування,Обід,323
Софія,Четвер,Харчування,Сніданок,245
Софія,П'ятниця,Проживання,Готель,1335
Софія,П'ятниця,Розваги,Розваги,67
Софія,П'ятниця,Харчування,Вечеря,589
Софія,Субота,Екскурсії,Екскурсія,437
Софія,Субота,Харчування,Сніданок,221
Софія,Субота,Різне,Вода/Закуски,90
Софія,Неділя,Харчування,Сніданок,255
Софія,Неділя,Харчування,Обід,416
Софія,Неділя,Екскурсії,Екскурсія,208
Адріан,Понеділок,Екскурсії,Екскурсія,465
Адріан,Понеділок,Різне,Вода/Закуски,59
Адріан,Понеділок,Харчування,Сніданок,202
Адріан,Вівторок,Різне,Вода/Закуски,76
Адріан,Вівторок,Розваги,Розваги,182
Адріан,Вівторок,Харчування,Обід,431
Адріан,Середа,Проживання,Готель,565
Адріан,Середа,Харчування,Сніданок,186
Адріан,Середа,Різне,Вода/Закуски,22
Адріан,Четвер,Екскурсії,Екскурсія,401
Адріан,Четвер,Розваги,Розваги,106
Адріан,Четвер,Харчування,Сніданок,101
Адріан,П'ятниця,Проживання,Готель,734
Адріан,П'ятниця,Різне,Вода/Закуски,28
Адріан,П'ятниця,Розваги,Розваги,58
Адріан,Субота,Розваги,Розваги,181
Адріан,Субота,Харчування,Обід,321
Адріан,Субота,Проживання,Готель,785
Адріан,Неділя,Різне,Вода/Закуски,89
Адріан,Неділя,Харчування,Вечеря,267
Адріан,Неділя,Харчування,Сніданок,285
Олександра,Понеділок,Екскурсії,Екскурсія,224
Олександра,Понеділок,Розваги,Розваги,171
Олександра,Понеділок,Харчування,Вечеря,408
Олександра,Вівторок,Харчування,Сніданок,268
Олександра,Вівторок,Проживання,Готель,941
Олександра,Вівторок,Різне,Вода/Закуски,65
Олександра,Середа,Харчування,Вечеря,573
Олександра,Середа,Розваги,Розваги,63
Олександра,Середа,Різне,Вода/Закуски,32
Олександра,Четвер,Проживання,Готель,1319
Олександра,Четвер,Харчування,Вечеря,255
Олександра,Четвер,Харчування,Обід,327
Олександра,П'ятниця,Харчування,Сніданок,214
Олександра,П'ятниця,Розваги,Розваги,85
Олександра,П'ятниця,Екскурсії,Екскурсія,316
Олександра,Субота,Харчування,Сніданок,163
Олександра,Субота,Харчування,Обід,238
Олександра,Субота,Харчування,Вечеря,426
Олександра,Неділя,Розваги,Розваги,62
Олександра,Неділя,Екскурсії,Екскурсія,433
Олександра,Неділя,Проживання,Готель,1053
Анатолій,Понеділок,Розваги,Розваги,110
Анатолій,Понеділок,Проживання,Готель,670
Анатолій,Понеділок,Різне,Вода/Закуски,72
Анатолій,Вівторок,Харчування,Вечеря,405
Анатолій,Вівторок,Розваги,Розваги,65
Анатолій,Вівторок,Харчування,Сніданок,142
Анатолій,Середа,Харчування,Вечеря,335
Анатолій,Середа,Проживання,Готель,1448
Анатолій,Середа,Розваги,Розваги,166
Анатолій,Четвер,Харчування,Обід,449
Анатолій,Четвер,Харчування,Вечеря,279
Анатолій,Четвер,Екскурсії,Екскурсія,197
Анатолій,П'ятниця,Харчування,Обід,496
Анатолій,П'ятниця,Харчування,Сніданок,288
Анатолій,П'ятниця,Проживання,Готель,1055
Анатолій,Субота,Проживання,Готель,558
Анатолій,Субота,Різне,Вода/Закуски,26
Анатолій,Субота,Харчування,Обід,499
Анатолій,Неділя,Харчування,Вечеря,280
Анатолій,Неділя,Екскурсії,Екскурсія,129
Анатолій,Неділя,Різне,Вода/Закуски,85
Ігор,Понеділок,Проживання,Готель,1109
Ігор,Понеділок,Харчування,Сніданок,117
Ігор,Понеділок,Розваги,Розваги,110
Ігор,Вівторок,Харчування,Вечеря,326
Ігор,Вівторок,Проживання,Готель,1092
Ігор,Вівторок,Екскурсії,Екскурсія,404
Ігор,Середа,Проживання,Готель,929
Ігор,Середа,Екскурсії,Екскурсія,436
Ігор,Середа,Розваги,Розваги,199
Ігор,Четвер,Екскурсії,Екскурсія,233
Ігор,Четвер,Розваги,Розваги,102
Ігор,Четвер,Харчування,Обід,360
Ігор,П'ятниця,Харчування,Сніданок,133
Ігор,П'ятниця,Харчування,Обід,353
Ігор,П'ятниця,Харчування,Вечеря,434
Ігор,Субота,Харчування,Обід,434
Ігор,Субота,Проживання,Готель,1136
Ігор,Субота,Різне,Вода/Закуски,92
Ігор,Неділя,Проживання,Готель,718
Ігор,Неділя,Розваги,Розваги,179
Ігор,Неділя,Екскурсії,Екскурсія,235
</file>

<file path="projects/black-jack/images/file_list.txt">
Clubs 1.png
Clubs 10.png
Clubs 11.png
Clubs 12.png
Clubs 13.png
Clubs 2.png
Clubs 3.png
Clubs 4.png
Clubs 5.png
Clubs 6.png
Clubs 7.png
Clubs 8.png
Clubs 9.png
Diamonds 1.png
Diamonds 10.png
Diamonds 11.png
Diamonds 12.png
Diamonds 13.png
Diamonds 2.png
Diamonds 3.png
Diamonds 4.png
Diamonds 5.png
Diamonds 6.png
Diamonds 7.png
Diamonds 8.png
Diamonds 9.png
Hearts 1.png
Hearts 10.png
Hearts 11.png
Hearts 12.png
Hearts 13.png
Hearts 2.png
Hearts 3.png
Hearts 4.png
Hearts 5.png
Hearts 6.png
Hearts 7.png
Hearts 8.png
Hearts 9.png
Spades 1.png
Spades 10.png
Spades 11.png
Spades 12.png
Spades 13.png
Spades 2.png
Spades 3.png
Spades 4.png
Spades 5.png
Spades 6.png
Spades 7.png
Spades 8.png
Spades 9.png
_3D box 1.png
_3D box 2.png
_Back.png
_Joker b.png
_Joker r.png
file_list.txt
</file>

<file path="projects/black-jack/index.html">
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Blackjack Game</h1>
    <div id="game">
        <div id="playerArea">
            <h2>Your Cards</h2>
            <div id="playerCards"></div>
            <p id="playerScore">Your Score: 0</p>
        </div>
        <div id="dealerArea">
            <h2>Dealer's Cards</h2>
            <div id="dealerCards"></div>
            <p id="dealerScore" style="display: none;">Dealer's Score: 0</p>
        </div>
        <div id="controls">
            <button id="hitButton">Hit</button>
            <button id="standButton">Stand</button>
        </div>
    </div>
    <div id="result" style="display: none;">
        <h2>Result</h2>
        <p id="resultText"></p>
        <button id="restartButton">Restart</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
</file>

<file path="projects/black-jack/script.js">
const suits = ["Clubs", "Diamonds", "Hearts", "Spades"];
const ranks = [
    { name: "1", value: 11 }, // Ace
    { name: "2", value: 2 },
    { name: "3", value: 3 },
    { name: "4", value: 4 },
    { name: "5", value: 5 },
    { name: "6", value: 6 },
    { name: "7", value: 7 },
    { name: "8", value: 8 },
    { name: "9", value: 9 },
    { name: "10", value: 10 },
    { name: "11", value: 10 }, // Jack
    { name: "12", value: 10 }, // Queen
    { name: "13", value: 10 }, // King
];

const deck = [];
for (const suit of suits) {
    for (const rank of ranks) {
        deck.push({
            value: rank.value,
            name: `${rank.name} of ${suit}`,
            file: `${suit} ${rank.name}.png`,
        });
    }
}

function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
}

const shuffledDeck = shuffleDeck(deck);

let playerScore = 0;
let dealerScore = 0;

function drawCard(deck) {
    return deck.pop();
}

function displayCard(card, player) {
    const cardImage = document.createElement("img");
    cardImage.src = `images/${card.file}`;
    cardImage.alt = card.name;
    document.getElementById(`${player}Cards`).appendChild(cardImage);
}

document.getElementById("hitButton").onclick = function () {
    const card = drawCard(shuffledDeck);
    playerScore += card.value;
    displayCard(card, "player");
    document.getElementById("playerScore").textContent = `Your Score: ${playerScore}`;

    if (playerScore > 21) {
        endGame("You busted! Dealer wins.");
    }
};

document.getElementById("standButton").onclick = function () {
    while (dealerScore < 17) {
        const card = drawCard(shuffledDeck);
        dealerScore += card.value;
        displayCard(card, "dealer");
    }

    document.getElementById("dealerScore").style.display = "block";
    document.getElementById("dealerScore").textContent = `Dealer's Score: ${dealerScore}`;

    if (dealerScore > 21 || playerScore > dealerScore) {
        endGame("You win!");
    } else if (playerScore < dealerScore) {
        endGame("Dealer wins!");
    } else {
        endGame("It's a tie!");
    }
};

function endGame(message) {
    document.getElementById("resultText").textContent = message;
    document.getElementById("result").style.display = "block";
    document.getElementById("hitButton").disabled = true;
    document.getElementById("standButton").disabled = true;
}

document.getElementById("restartButton").onclick = function () {
    location.reload();
};
</file>

<file path="lectures/lesson5-Algorithms/exercise5-Find-Nearest-Cafe.md">
# Практичне заняття: Знайти найближче кафе

## Мета

📌 Мета: навчити учнів працювати з масивами та циклами, а також візуально пояснити метод k найближчих сусідів (k-NN) на простому прикладі.

## Умова завдання

Уявіть, що ви турист у незнайомому місті та хочете знайти найближче кафе. У нас є карта з координатами кафе та ваше поточне місце розташування. Вам потрібно написати програму, яка визначить найближчий заклад.

## Вхідні дані

- Масив об’єктів cafes, де кожен об’єкт містить координати кафе {x, y} та його назву.
- Координати туриста {x, y}.

```javascript
const cafes = [
    { name: "Latte Heaven", x: 3, y: 7 },
    { name: "Pizza Corner", x: 5, y: 2 },
    { name: "Sushi Point", x: 9, y: 6 },
    { name: "Burger Land", x: 2, y: 3 },
    { name: "Coffee Time", x: 6, y: 8 }
];

const tourist = { x: 4, y: 5 }; // Координати туриста
```

## Вимоги до програми

✅ Знайти кафе, яке найближче до туриста за евклідовою відстанню:

✅ Вивести назву цього кафе та його координати.

## Приклад рішення

```javascript
function findNearestCafe(cafes, tourist) {
    let minDistance = Infinity;
    let nearestCafe = null;

    for (let i = 0; i < cafes.length; i++) {
        let cafe = cafes[i];
        let distance = Math.sqrt(
            Math.pow(cafe.x - tourist.x, 2) + Math.pow(cafe.y - tourist.y, 2)
        );

        if (distance < minDistance) {
            minDistance = distance;
            nearestCafe = cafe;
        }
    }

    return nearestCafe;
}

const nearest = findNearestCafe(cafes, tourist);
console.log(`Найближче кафе: ${nearest.name} (${nearest.x}, ${nearest.y})`);
```

## Візуалізація на графіку

📍 Турист знаходиться в точці (4,5).
🏠 Кафе розкидані по мапі, і програма знаходить найближче.

💡 Це можна намалювати на Canvas або у GeoJSON, якщо у вас є можливість додати візуалізацію.

## Додаткові ідеї

- Розширений варіант: нехай турист хоче знайти топ-2 найближчих кафе.
- Ускладнений варіант: нехай у кафе є рейтинг, і турист обирає найкраще з найближчих.

Такий підхід навчить дітей працювати з масивами, циклами та умовами, а також покаже, як можна застосувати математику в програмуванні! 🚀

## Реальні дані для кафе у Львові

```javascript
const cafesLviv = [
  { name: "Львівська копальня кави", x: 49.8415, y: 24.0322 },
  { name: "Дзиґа", x: 49.8409, y: 24.0298 },
  { name: "Вірменка", x: 49.8407, y: 24.0335 },
  { name: "Світ кави", x: 49.8412, y: 24.0305 },
  { name: "Кафе 1", x: 49.8418, y: 24.0315 },
  { name: "Золотий дукат", x: 49.8410, y: 24.0328 },
  { name: "Під синьою пляшкою", x: 49.8413, y: 24.0330 },
  { name: "Чорна кішка", x: 49.8405, y: 24.0295 },
  { name: "Білка", x: 49.8416, y: 24.0325 },
  { name: "Альтернативна кава", x: 49.8408, y: 24.0310 }
];

const touristLviv = { x: 49.8411, y: 24.0320 };
```
</file>

<file path="lectures/lesson5-Algorithms/lecture5-Algorithms.md">
# Лекція 5: Алгоритми

[PDF Презентація Лекції 5](./lecture5-Algorithms.pdf)

## Вступ

У цій лекції ми розглянемо основи алгоритмів, включаючи їх визначення, класифікацію та приклади. Алгоритми є основою програмування та допомагають вирішувати різноманітні задачі ефективно.

## Що таке алгоритм?

Алгоритм - це послідовність кроків або інструкцій, які виконуються для досягнення певної мети або вирішення задачі. Алгоритми можуть бути представлені у вигляді тексту, псевдокоду, блок-схем або програмного коду.

## Класифікація алгоритмів

Алгоритми можна класифікувати за різними критеріями, такими як:

1. За типом задачі:
   - Сортування
   - Пошук
   - Оптимізація
   - Графові алгоритми

2. За методом вирішення:
   - Жадібні алгоритми
   - Динамічне програмування
   - Розділяй і володарюй
   - Повернення назад

## Приклади алгоритмів

### Алгоритм сортування бульбашкою

Алгоритм сортування бульбашкою - це простий алгоритм сортування, який порівнює сусідні елементи масиву і обмінює їх місцями, якщо вони знаходяться в неправильному порядку. Цей процес повторюється до тих пір, поки масив не буде відсортований.

```javascript
function bubbleSort(arr) {
  let n = arr.length;
  for (let i = 0; i < n - 1; i++) {
    for (let j = 0; j < n - i - 1; j++) {
      if (arr[j] > arr[j + 1]) {
        let temp = arr[j];
        arr[j] = arr[j + 1];
        arr[j + 1] = temp;
      }
    }
  }
  return arr;
}

let array = [64, 34, 25, 12, 22, 11, 90];
console.log("Відсортований масив: " + bubbleSort(array));
```

### Алгоритм пошуку бінарного дерева

Алгоритм пошуку бінарного дерева - це ефективний алгоритм пошуку, який працює на відсортованих масивах. Він розділяє масив на дві частини і порівнює середній елемент з шуканим значенням. Якщо середній елемент дорівнює шуканому значенню, алгоритм завершується. Якщо шукане значення менше середнього елемента, алгоритм повторюється для лівої половини масиву, інакше - для правої половини.

```javascript
function binarySearch(arr, x) {
  let left = 0;
  let right = arr.length - 1;
  while (left <= right) {
    let mid = Math.floor((left + right) / 2);
    if (arr[mid] === x) {
      return mid;
    } else if (arr[mid] < x) {
      left = mid + 1;
    } else {
      right = mid - 1;
    }
  }
  return -1;
}

let sortedArray = [2, 3, 4, 10, 40];
let target = 10;
let result = binarySearch(sortedArray, target);
if (result === -1) {
  console.log("Елемент не знайдено");
} else {
  console.log("Елемент знайдено на індексі: " + result);
}
```

## Використання файлу `geojson.json` з geojson.io

### Як використовувати файл `geojson.json` з geojson.io

Файл `geojson.json` містить дані про кафе у Львові у форматі GeoJSON. Ви можете використовувати цей файл для візуалізації кафе на карті за допомогою сервісу geojson.io.

### Інструкції з візуалізації кафе у Львові за допомогою geojson.io

1. Відкрийте веб-сайт [geojson.io](http://geojson.io).
2. Натисніть на кнопку "Open" у верхньому меню.
3. Виберіть "File" і завантажте файл `geojson.json`.
4. Кафе у Львові будуть відображені на карті.

### Посилання на файл `geojson.json`

[Завантажити файл geojson.json](geojson/geojson.json)

## Summary of all materials in the lecture folder

- `lecture5-Algorithms.md`: Основний текст лекції з алгоритмів.
- `lecture5-Algorithms.pdf`: Презентація лекції у форматі PDF.
- `exercise5-Find-Nearest-Cafe.md`: Практичне заняття для знаходження найближчого кафе.
- `solution5-Find-Nearest-Cafe.js`: Рішення для практичного заняття з знаходження найближчого кафе.
- `geojson/geojson.json`: Дані про кафе у Львові у форматі GeoJSON.
</file>

<file path="lectures/lesson5-Algorithms/solution5-Find-Nearest-Cafe.js">
function findNearestCafe(cafes, tourist) {
    let minDistance = Infinity;
    let nearestCafe = null;

    for (let i = 0; i < cafes.length; i++) {
        let cafe = cafes[i];
        let distance = Math.sqrt(
            Math.pow(cafe.x - tourist.x, 2) + Math.pow(cafe.y - tourist.y, 2)
        );

        if (distance < minDistance) {
            minDistance = distance;
            nearestCafe = cafe;
        }
    }

    return nearestCafe;
}

const cafes = [
    { name: "Latte Heaven", x: 3, y: 7 },
    { name: "Pizza Corner", x: 5, y: 2 },
    { name: "Sushi Point", x: 9, y: 6 },
    { name: "Burger Land", x: 2, y: 3 },
    { name: "Coffee Time", x: 6, y: 8 }
];

const tourist = { x: 4, y: 5 }; // Координати туриста

const nearest = findNearestCafe(cafes, tourist);
console.log(`Найближче кафе: ${nearest.name} (${nearest.x}, ${nearest.y})`);

const cafesLviv = [
  { name: "Львівська копальня кави", x: 49.8415, y: 24.0322 },
  { name: "Дзиґа", x: 49.8409, y: 24.0298 },
  { name: "Вірменка", x: 49.8407, y: 24.0335 },
  { name: "Світ кави", x: 49.8412, y: 24.0305 },
  { name: "Кафе 1", x: 49.8418, y: 24.0315 },
  { name: "Золотий дукат", x: 49.8410, y: 24.0328 },
  { name: "Під синьою пляшкою", x: 49.8413, y: 24.0330 },
  { name: "Чорна кішка", x: 49.8405, y: 24.0295 },
  { name: "Білка", x: 49.8416, y: 24.0325 },
  { name: "Альтернативна кава", x: 49.8408, y: 24.0310 }
];

const touristLviv = { x: 49.8411, y: 24.0320 };

const nearestLviv = findNearestCafe(cafesLviv, touristLviv);
console.log(`Найближче кафе у Львові: ${nearestLviv.name} (${nearestLviv.x}, ${nearestLviv.y})`);
</file>

<file path="lectures/lesson5-BlackJack-OOP/BlackJack-OOP.md">
# Проектна діяльність: BlackJack OOP

[PDF Презентація Лекції 5](./BlackJack-OOP.pdf)

## Мета проекту

Метою цього проекту є розробка карткової гри BlackJack з використанням концепцій об'єктно-орієнтованого програмування (ООП). Під час цього проекту учні отримають розуміння практичного застосування концепцій ООП, таких як класи, об'єкти, наслідування та інкапсуляція. Крім того, під час розробки ми будемо освоювати масиви, функції, цикли, роботу з DOM та інші важливі аспекти програмування на JavaScript.

## Освітні цілі

1. Ознайомлення з основними концепціями ООП.
2. Розуміння принципів наслідування та інкапсуляції.
3. Практичне застосування масивів, функцій та циклів.
4. Робота з DOM для створення інтерактивного інтерфейсу.
5. Розробка алгоритмів для симуляції гри та аналізу результатів.

## Кроки для реалізації проекту

### Крок 1: Створення класів для карт та колоди

1. Створіть клас `Card`, який буде представляти окрему карту. Клас повинен мати властивості для масті, рангу та значення карти.
2. Створіть клас `Deck`, який буде представляти колоду карт. Клас повинен мати методи для генерації колоди, перемішування карт та витягування карти.

### Крок 2: Створення класів для гравця та дилера

1. Створіть клас `Player`, який буде представляти гравця. Клас повинен мати властивості для імені, руки (масиву карт) та рахунку. Додайте методи для витягування карти та обчислення рахунку.
2. Створіть клас `Dealer`, який буде наслідувати клас `Player`. Додайте методи для специфічної логіки дилера, такої як витягування карт до досягнення певного рахунку.

### Крок 3: Реалізація логіки гри

1. Створіть функції для початку нової гри, витягування карт гравцем та дилером, а також визначення результату гри.
2. Додайте обробку подій для кнопок "Hit" та "Stand", щоб гравець міг взаємодіяти з грою.

### Крок 4: Робота з DOM

1. Створіть HTML структуру для відображення карт гравця та дилера, а також для відображення рахунку та результату гри.
2. Використовуйте JavaScript для динамічного оновлення вмісту сторінки, додавання та видалення елементів, а також обробки подій.

### Крок 5: Симуляція гри та аналіз результатів

1. Створіть алгоритми для симуляції гри, коли комп'ютер грає за певним алгоритмом.
2. Проведіть симуляцію гри на 100 партій та проаналізуйте результати.
3. Обговоріть з учнями, як можна використовувати ці результати для розробки стратегій гри та чому азартні ігри можуть бути шкідливими.

## Висновок

Після завершення цього проекту учні отримають глибоке розуміння концепцій ООП та їх практичного застосування у розробці ігор. Вони також зможуть розробляти алгоритми для симуляції гри та аналізу результатів, що допоможе їм зрозуміти важливість алгоритмічного мислення та аналізу даних.

## Summary of all materials in the lecture folder

- `BlackJack-OOP.md`: Основний текст лекції з проектної діяльності BlackJack OOP.
- `BlackJack-OOP.pdf`: Презентація лекції у форматі PDF.
- `activity_diagram.puml`: Діаграма активності для гри BlackJack.
- `sequence_diagram.puml`: Діаграма послідовності для гри BlackJack.
</file>

<file path="lectures/lesson5-BlackJack-OOP/lecture5-UML.md">
# Лекція 5: Основи UML для учнів 8 класу

[PDF Презентація Лекції 5](./lecture5-UML.pdf)

## Вступ

Ласкаво просимо на лекцію про основи UML! UML (Unified Modeling Language) - це мова моделювання, яка використовується для візуалізації, проектування та документування програмних систем. У цій лекції ми розглянемо два основних типи діаграм UML: діаграми активності та діаграми класів.

## Діаграма активності

Діаграма активності показує послідовність дій або кроків у процесі. Вона допомагає зрозуміти, як виконується процес від початку до кінця. Давайте розглянемо простий приклад діаграми активності для процесу приготування чаю.

### Приклад діаграми активності

1. Початок процесу
2. Налити воду в чайник
3. Включити чайник
4. Дочекатися, поки вода закипить
5. Насипати чай у чашку
6. Залити чай кип'ятком
7. Додати цукор або молоко (за бажанням)
8. Кінець процесу

```plantuml
@startuml
start
:Налити воду в чайник;
:Включити чайник;
:Дочекатися, поки вода закипить;
:Насипати чай у чашку;
:Залити чай кип'ятком;
if (Додати цукор або молоко?) then (так)
  :Додати цукор або молоко;
endif
stop
@enduml
```

## Діаграма класів

Діаграма класів показує структуру системи, включаючи класи, їх властивості, методи та зв'язки між ними. Вона допомагає зрозуміти, як різні частини системи взаємодіють одна з одною. Давайте розглянемо простий приклад діаграми класів для системи управління бібліотекою.

### Приклад діаграми класів

1. Клас "Книга" з властивостями "назва", "автор" та "рік видання"
2. Клас "Читач" з властивостями "ім'я", "прізвище" та "номер читацького квитка"
3. Клас "Бібліотекар" з властивостями "ім'я", "прізвище" та "номер працівника"
4. Зв'язок між класами "Читач" та "Книга" (читач може брати книги)
5. Зв'язок між класами "Бібліотекар" та "Книга" (бібліотекар може видавати книги)

```plantuml
@startuml
class Книга {
  -назва: String
  -автор: String
  -рік видання: int
}

class Читач {
  -ім'я: String
  -прізвище: String
  -номер читацького квитка: int
}

class Бібліотекар {
  -ім'я: String
  -прізвище: String
  -номер працівника: int
}

Читач "1" -- "0..*" Книга: бере
Бібліотекар "1" -- "0..*" Книга: видає
@enduml
```

## Висновок

У цій лекції ми розглянули основи UML, включаючи діаграми активності та діаграми класів. Ці діаграми допомагають візуалізувати процеси та структуру системи, що робить їх корисними інструментами для проектування та документування програмних систем. Сподіваємося, що ця лекція допомогла вам зрозуміти основи UML та їх застосування.

## Summary of all materials in the lecture folder

- `lecture5-UML.md`: Основний текст лекції з основ UML.
- `lecture5-UML.pdf`: Презентація лекції у форматі PDF.
- `activity_diagram.puml`: Діаграма активності для процесу приготування чаю.
- `sequence_diagram.puml`: Діаграма послідовності для гри BlackJack.
</file>

<file path="lectures/lesson7-Objects/lecture7-Objects.md">
# Лекція 6: Об’єкти в JavaScript

[PDF Презентація Лекції 6](./lecture7-Objects.pdf)

## Зміст

1. Що таке об’єкти?
2. Створення об’єктів
3. Доступ до властивостей об’єкта
4. Використання змінних як ключів
5. Оновлення властивостей об’єкта
6. Додавання нових властивостей до об’єкта
7. Видалення властивостей з об’єкта
8. Об’єкти для пошуку (Objects for Lookups)
9. Перевірка властивостей об’єкта
10. Маніпуляція складними об’єктами
11. Вкладені об’єкти
12. Практичне використання об’єктів
13. Основні поради

## 1. Що таке об’єкти?

Об’єкти — це структура даних, яка представляє значення у вигляді пар “ключ-значення”. Вони використовуються для моделювання реальних об’єктів, зберігання даних та їхньої логіки.

- Ключ: унікальний ідентифікатор (строка).
- Значення: може бути будь-яким типом даних (строка, число, масив, функція тощо).

```javascript
const person = {
  name: "Олександр",
  age: 30,
  isEmployed: true
};
```

## 2. Створення об’єктів

### a) Літерал об’єкта

Найпростіший спосіб створення об’єкта — використання фігурних дужок {}.

```javascript
const car = {
  brand: "Toyota",
  model: "Corolla",
  year: 2021
};
```

### b) Використання конструктора Object

Цей спосіб створює порожній об’єкт, до якого можна додати властивості.

```javascript
const book = new Object();
book.title = "1984";
book.author = "George Orwell";
```

## 3. Доступ до властивостей об’єкта

### a) Крапкова нотація (Dot Notation)

Використовується, коли ім’я ключа відоме і не містить спеціальних символів.

```javascript
console.log(car.brand); // "Toyota"
```

### b) Квадратні дужки (Bracket Notation)

Застосовується, якщо ключ містить пробіли, спеціальні символи або зберігається в змінній.

```javascript
console.log(car["model"]); // "Corolla"

const key = "year";
console.log(car[key]); // 2021
```

## 4. Використання змінних як ключів

Ключі можуть бути визначені динамічно через змінні.

```javascript
const property = "age";
console.log(person[property]); // 30
```

## 5. Оновлення властивостей об’єкта

Змінюйте значення існуючих ключів за допомогою крапкової або квадратної нотації.

```javascript
person.age = 31;
console.log(person.age); // 31
```

## 6. Додавання нових властивостей до об’єкта

Додайте нові ключі під час виконання програми.

```javascript
person.city = "Львів";
console.log(person.city); // "Львів"
```

## 7. Видалення властивостей з об’єкта

Оператор delete видаляє властивість.

```javascript
delete person.isEmployed;
console.log(person.isEmployed); // undefined
```

## 8. Об’єкти для пошуку (Objects for Lookups)

Об’єкти можна використовувати як словники, де ключ — це поняття, а значення — його визначення.

```javascript
const colors = {
  red: "червоний",
  green: "зелений",
  blue: "синій"
};

console.log(colors.red); // "червоний"
```

## 9. Перевірка властивостей об’єкта

### a) Метод hasOwnProperty()

```javascript
console.log(person.hasOwnProperty("age")); // true
console.log(person.hasOwnProperty("salary")); // false
```

### b) Оператор in

```javascript
console.log("name" in person); // true
console.log("salary" in person); // false
```

## 10. Маніпуляція складними об’єктами

Об’єкти можуть містити масиви або вкладені об’єкти.

```javascript
const student = {
  name: "Анна",
  grades: [90, 85, 88],
  contact: {
    email: "anna@example.com",
    phone: "+380123456789"
  }
};

// Доступ до масиву
console.log(student.grades[1]); // 85

// Доступ до вкладених об'єктів
console.log(student.contact.email); // "anna@example.com"
```

## 11. Вкладені об’єкти

Вкладені об’єкти дозволяють створювати складні структури даних.

```javascript
const company = {
  name: "Tech Corp",
  departments: {
    it: {
      employees: 50,
      manager: "Олег"
    },
    hr: {
      employees: 10,
      manager: "Наталя"
    }
  }
};

console.log(company.departments.it.manager); // "Олег"
```

## 12. Практичне використання об’єктів

### a) Словник значень

Об’єкти використовуються як заміна для пошуку значень.

```javascript
function getDayName(dayNumber) {
  const days = {
    1: "Понеділок",
    2: "Вівторок",
    3: "Середа",
    4: "Четвер",
    5: "П'ятниця",
    6: "Субота",
    7: "Неділя"
  };

  return days[dayNumber] ?? "Невідомий день";
}

console.log(getDayName(3)); // "Середа"
```

### b) Конфігурації

Об’єкти часто використовуються для зберігання налаштувань.

```javascript
const config = {
  theme: "dark",
  language: "uk",
  notifications: true
};

console.log(config.theme); // "dark"
```

## 13. Основні поради

1. Використовуйте крапкову нотацію, якщо ключ відомий і не містить спеціальних символів.
2. Використовуйте квадратні дужки, якщо ключ є змінною або містить символи.
3. Перевіряйте наявність властивостей перед доступом до них.
4. Розумно використовуйте вкладені об’єкти для складних структур.

Цей матеріал покриває базові та розширені аспекти роботи з об’єктами в JavaScript, демонструючи їхню гнучкість і потужність.

## Summary of all materials in the lecture folder

- `lecture7-Objects.md`: Основний текст лекції з об’єктів у JavaScript.
- `lecture7-Objects.pdf`: Презентація лекції у форматі PDF.
- `exercise7-Objects.md`: Вправа для практики роботи з об’єктами.
</file>

<file path="lectures/lesson8-OOP/lecture8-OOP.md">
# Лекція 7: Основи об’єктно-орієнтованого програмування (ООП)

[PDF Презентація Лекції 7](./lecture8-OOP.pdf)

Ласкаво просимо на сьому лекцію курсу вивчення JavaScript! У цій лекції ми розглянемо основи об’єктно-орієнтованого програмування (ООП), включаючи ключові концепції, синтаксис класів, методи та властивості класів, а також інкапсуляцію.

## Зміст

1. Вступ до ООП
2. Принципи ООП
3. Синтаксис класів
4. Методи та властивості класів
5. Інкапсуляція
6. Висновок

## 1. Вступ до ООП

Об’єктно-орієнтоване програмування (ООП) — це парадигма програмування, яка базується на концепції об’єктів. Об’єкти можуть містити дані у вигляді полів (властивостей) та код у вигляді методів (функцій). ООП дозволяє створювати модульні, повторно використовувані та підтримувані програми.

## 2. Принципи ООП

### Інкапсуляція

Інкапсуляція — це процес об’єднання даних та методів, які працюють з цими даними, в один об’єкт. Це дозволяє приховувати внутрішні деталі реалізації об’єкта та забезпечувати доступ до даних через публічні методи.

### Наслідування

Наслідування дозволяє створювати нові класи на основі існуючих класів. Новий клас (похідний клас) успадковує властивості та методи існуючого класу (базового класу) і може додавати нові або перевизначати існуючі.

### Поліморфізм

Поліморфізм дозволяє використовувати один і той самий інтерфейс для різних типів об’єктів. Це означає, що методи з однаковими іменами можуть мати різну реалізацію залежно від об’єкта, до якого вони застосовуються.

### Абстракція

Абстракція — це процес виділення загальних характеристик об’єктів та створення абстрактних класів або інтерфейсів, які визначають ці характеристики. Абстракція дозволяє зосередитися на суттєвих аспектах об’єктів і приховувати несуттєві деталі.

## 3. Синтаксис класів

У JavaScript класи визначаються за допомогою ключового слова `class`. Клас може містити конструктор, методи та властивості.

### Приклад класу

```javascript
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  greet() {
    console.log(`Привіт, мене звати ${this.name} і мені ${this.age} років.`);
  }
}

const person1 = new Person("Олександр", 30);
person1.greet(); // Виведе: Привіт, мене звати Олександр і мені 30 років.
```

## 4. Методи та властивості класів

### Властивості класів

Властивості класів визначаються в конструкторі та можуть бути доступні через `this`.

```javascript
class Car {
  constructor(brand, model) {
    this.brand = brand;
    this.model = model;
  }
}

const car1 = new Car("Toyota", "Corolla");
console.log(car1.brand); // Виведе: Toyota
```

### Методи класів

Методи класів визначаються всередині класу та можуть використовувати `this` для доступу до властивостей.

```javascript
class Car {
  constructor(brand, model) {
    this.brand = brand;
    this.model = model;
  }

  displayInfo() {
    console.log(`Це ${this.brand} ${this.model}.`);
  }
}

const car1 = new Car("Toyota", "Corolla");
car1.displayInfo(); // Виведе: Це Toyota Corolla.
```

## 5. Інкапсуляція

Інкапсуляція дозволяє обмежувати доступ до внутрішніх деталей об’єкта за допомогою приватних полів та методів.

### Приватні поля та методи

Приватні поля та методи визначаються за допомогою символу `#`.

```javascript
class BankAccount {
  #balance;

  constructor(initialBalance) {
    this.#balance = initialBalance;
  }

  deposit(amount) {
    this.#balance += amount;
  }

  withdraw(amount) {
    if (amount <= this.#balance) {
      this.#balance -= amount;
    } else {
      console.log("Недостатньо коштів.");
    }
  }

  getBalance() {
    return this.#balance;
  }
}

const account = new BankAccount(1000);
account.deposit(500);
account.withdraw(200);
console.log(account.getBalance()); // Виведе: 1300
```

### Гетери та сетери

Гетери та сетери дозволяють керувати доступом до властивостей об’єкта.

```javascript
class Person {
  constructor(name, age) {
    this._name = name;
    this._age = age;
  }

  get name() {
    return this._name;
  }

  set name(newName) {
    this._name = newName;
  }

  get age() {
    return this._age;
  }

  set age(newAge) {
    if (newAge > 0) {
      this._age = newAge;
    } else {
      console.log("Вік має бути позитивним числом.");
    }
  }
}

const person1 = new Person("Олександр", 30);
console.log(person1.name); // Виведе: Олександр
person1.age = 35;
console.log(person1.age); // Виведе: 35
```

## 6. Висновок

У цій лекції ми розглянули основи об’єктно-орієнтованого програмування (ООП), включаючи ключові концепції, синтаксис класів, методи та властивості класів, а також інкапсуляцію. Ці основні концепції допоможуть вам створювати модульні, повторно використовувані та підтримувані програми на JavaScript.

## Summary of all materials in the lecture folder

- `lecture8-OOP.md`: Основний текст лекції з основ об’єктно-орієнтованого програмування (ООП).
- `lecture8-OOP.pdf`: Презентація лекції у форматі PDF.
</file>

<file path="projects/black-jack/instructions.md">
# Інструкції до проекту гри Black Jack

## Вступ

Ласкаво просимо до проекту гри Black Jack! У цьому проекті ви створите гру Black Jack за допомогою JavaScript. Цей документ містить детальні інструкції щодо налаштування проекту, генерації колоди карт, перемішування колоди, відображення карт та обробки спеціальних карт.

## Генерація колоди

Для генерації колоди карт ми будемо використовувати наступні масті та ранги:

```javascript
const suits = ["Clubs", "Diamonds", "Hearts", "Spades"];
const ranks = [
    { name: "1", value: 11 }, // Ace
    { name: "2", value: 2 },
    { name: "3", value: 3 },
    { name: "4", value: 4 },
    { name: "5", value: 5 },
    { name: "6", value: 6 },
    { name: "7", value: 7 },
    { name: "8", value: 8 },
    { name: "9", value: 9 },
    { name: "10", value: 10 },
    { name: "11", value: 10 }, // Jack
    { name: "12", value: 10 }, // Queen
    { name: "13", value: 10 }, // King
];
```

Ми згенеруємо колоду, поєднуючи кожну масть з кожним рангом:

```javascript
const deck = [];
for (const suit of suits) {
    for (const rank of ranks) {
        deck.push({
            value: rank.value,
            name: `${rank.name} of ${suit}`,
            file: `${suit} ${rank.name}.png`,
        });
    }
}
```

## Перемішування колоди

Для перемішування колоди ми будемо використовувати алгоритм перемішування Фішера-Йетса:

```javascript
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
}

const shuffledDeck = shuffleDeck(deck);
console.log(shuffledDeck);
```

## Відображення карт

Для відображення карт ми створимо функції для витягування карти та її відображення:

```javascript
function drawCard(deck) {
    return deck.pop(); // Взяти верхню карту
}

function displayCard(card, player) {
    const cardImage = document.createElement("img");
    cardImage.src = `images/${card.file}`; // За потреби налаштуйте шлях
    cardImage.alt = card.name;
    document.getElementById(`${player}Cards`).appendChild(cardImage);
}

// Приклад використання
const card = drawCard(shuffledDeck);
displayCard(card, "player");
```

## Спеціальні карти

У вас є додаткові файли, такі як `_3D box`, `_Back`, `_Joker b`, `_Joker r`. Ви можете використовувати їх для:

- `_Back.png`: Зворотні сторони карт для прихованих карт (наприклад, друга карта дилера).
- Джокери: Додаткові карти для спеціальних правил.
- 3D Box: Візуальне представлення колоди.

Приклад для зворотних сторін карт:

```javascript
function displayCardBack(player) {
    const cardBack = document.createElement("img");
    cardBack.src = `images/_Back.png`;
    cardBack.alt = "Card Back";
    document.getElementById(`${player}Cards`).appendChild(cardBack);
}

// Приклад: Прихована карта дилера
displayCardBack("dealer");
```

## Повна інтеграція гри

З цим налаштуванням:

1. Ви маєте повну колоду, згенеровану з ваших імен файлів.
2. Карти відображаються з правильними зображеннями.
3. Додаткові ресурси (наприклад, `_Back.png`) покращують візуальний вигляд гри.

Дайте знати, якщо вам потрібна подальша налаштування! 😊

## HTML

Створіть основну структуру сторінки:

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blackjack Game</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <h1>Blackjack Game</h1>
    <div id="game">
        <div id="playerArea">
            <h2>Your Cards</h2>
            <div id="playerCards"></div>
            <p id="playerScore">Your Score: 0</p>
        </div>
        <div id="dealerArea">
            <h2>Dealer's Cards</h2>
            <div id="dealerCards"></div>
            <p id="dealerScore" style="display: none;">Dealer's Score: 0</p>
        </div>
        <div id="controls">
            <button id="hitButton">Hit</button>
            <button id="standButton">Stand</button>
        </div>
    </div>
    <div id="result" style="display: none;">
        <h2>Result</h2>
        <p id="resultText"></p>
        <button id="restartButton">Restart</button>
    </div>
    <script src="script.js"></script>
</body>
</html>
```

## CSS

Додайте простий стиль для гри:

```css
body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 0;
}

h1 {
    margin: 20px;
}

#game {
    margin: 20px;
}

#playerCards, #dealerCards {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 10px;
}

img {
    width: 80px;
    height: auto;
}

button {
    padding: 10px 20px;
    margin: 10px;
    font-size: 16px;
    cursor: pointer;
}
```

## JavaScript

Скрипт для реалізації гри:

```javascript
// 1. Генерація колоди
const suits = ["Clubs", "Diamonds", "Hearts", "Spades"];
const ranks = [
    { name: "1", value: 11 }, // Ace
    { name: "2", value: 2 },
    { name: "3", value: 3 },
    { name: "4", value: 4 },
    { name: "5", value: 5 },
    { name: "6", value: 6 },
    { name: "7", value: 7 },
    { name: "8", value: 8 },
    { name: "9", value: 9 },
    { name: "10", value: 10 },
    { name: "11", value: 10 }, // Jack
    { name: "12", value: 10 }, // Queen
    { name: "13", value: 10 }, // King
];

const deck = [];
for (const suit of suits) {
    for (const rank of ranks) {
        deck.push({
            value: rank.value,
            name: `${rank.name} of ${suit}`,
            file: `${suit} ${rank.name}.png`,
        });
    }
}

// 2. Перетасовка колоди
function shuffleDeck(deck) {
    for (let i = deck.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [deck[i], deck[j]] = [deck[j], deck[i]];
    }
    return deck;
}

const shuffledDeck = shuffleDeck(deck);

// 3. Глобальні змінні
let playerScore = 0;
let dealerScore = 0;

// 4. Логіка гри
function drawCard(deck) {
    return deck.pop();
}

function displayCard(card, player) {
    const cardImage = document.createElement("img");
    cardImage.src = `images/${card.file}`;
    cardImage.alt = card.name;
    document.getElementById(`${player}Cards`).appendChild(cardImage);
}

document.getElementById("hitButton").onclick = function () {
    const card = drawCard(shuffledDeck);
    playerScore += card.value;
    displayCard(card, "player");
    document.getElementById("playerScore").textContent = `Your Score: ${playerScore}`;

    if (playerScore > 21) {
        endGame("You busted! Dealer wins.");
    }
};

document.getElementById("standButton").onclick = function () {
    while (dealerScore < 17) {
        const card = drawCard(shuffledDeck);
        dealerScore += card.value;
        displayCard(card, "dealer");
    }

    document.getElementById("dealerScore").style.display = "block";
    document.getElementById("dealerScore").textContent = `Dealer's Score: ${dealerScore}`;

    if (dealerScore > 21 || playerScore > dealerScore) {
        endGame("You win!");
    } else if (playerScore < dealerScore) {
        endGame("Dealer wins!");
    } else {
        endGame("It's a tie!");
    }
};

function endGame(message) {
    document.getElementById("resultText").textContent = message;
    document.getElementById("result").style.display = "block";
    document.getElementById("hitButton").disabled = true;
    document.getElementById("standButton").disabled = true;
}

document.getElementById("restartButton").onclick = function () {
    location.reload();
};
```

Результат:
- Гравець може грати у “Blackjack” із реалістичними картинками.
- Логіка гри та рахунок працюють.
- Простий, зрозумілий інтерфейс.
</file>

<file path="projects/black-jack/style.css">
body {
    font-family: Arial, sans-serif;
    text-align: center;
    margin: 0;
    padding: 0;
}

h1 {
    margin: 20px;
}

#game {
    margin: 20px;
}

#playerCards, #dealerCards {
    display: flex;
    justify-content: center;
    gap: 10px;
    margin-bottom: 10px;
}

img {
    width: 250px;
    height: auto;
}

button {
    padding: 10px 20px;
    margin: 10px;
    font-size: 16px;
    cursor: pointer;
}
</file>

<file path="lectures/lesson1-Basics-JavaScript/lecture1-Basics-JavaScript.md">
# Лекція 1: Основи JavaScript

[PDF Презентація Лекції 1](./lecture1-Basics-JavaScript.pdf)

Ласкаво просимо на першу лекцію курсу вивчення JavaScript! У цій лекції ми розглянемо основи JavaScript, включаючи його історію, синтаксис та основні програмні концепції.

Презентація https://github.com/oldens/javascript-learning-course/blob/main/lectures/lesson1-Basics-JavaScript/Osnovi-JavaScript-Kurs-dlya-pochatkivciv.pdf

## Зміст

1. Вступ до JavaScript
2. Синтаксис JavaScript
3. Змінні та типи даних
4. Оператори
5. Структури управління
6. Функції
7. Висновок

## 1. Вступ до JavaScript

JavaScript - це універсальна та потужна мова програмування, яка широко використовується для веб-розробки. Вона була створена Бренданом Айком у 1995 році і з тих пір стала однією з найпопулярніших мов програмування у світі. JavaScript в основному використовується для створення інтерактивних та динамічних веб-сторінок, але також може використовуватися для серверної розробки, розробки мобільних додатків та багато іншого.

## 2. Синтаксис JavaScript

Синтаксис JavaScript відноситься до набору правил, які визначають, як написана та інтерпретується програма на JavaScript. Ось деякі ключові моменти про синтаксис JavaScript:

- JavaScript чутливий до регістру, тобто `myVariable` та `myvariable` вважаються різними змінними.
- Оператори в JavaScript зазвичай завершуються крапкою з комою (`;`).
- Код JavaScript може бути написаний у тегах `<script>` у HTML-файлі або у зовнішніх файлах `.js`.

## 3. Змінні та типи даних

Змінні використовуються для зберігання даних у програмі на JavaScript. Для оголошення змінної можна використовувати ключові слова `var`, `let` або `const`. Ось деякі приклади:

```javascript
var myVariable = 10;
let myOtherVariable = "Привіт, світ!";
const myConstant = 3.14;
```

JavaScript має кілька типів даних, включаючи:

- `Number`: Представляє числові значення, наприклад, `10`, `3.14`.
- `String`: Представляє текст, наприклад, `"Привіт, світ!"`.
- `Boolean`: Представляє значення true або false, наприклад, `true`, `false`.
- `Array`: Представляє колекцію значень, наприклад, `[1, 2, 3]`.
- `Object`: Представляє колекцію пар ключ-значення, наприклад, `{ name: "John", age: 30 }`.

## 4. Оператори

Оператори використовуються для виконання операцій над змінними та значеннями. Ось деякі загальні оператори в JavaScript:

- Арифметичні оператори: `+`, `-`, `*`, `/`, `%`
- Оператори порівняння: `==`, `===`, `!=`, `!==`, `>`, `<`, `>=`, `<=`
- Логічні оператори: `&&`, `||`, `!`

## 5. Структури управління

Структури управління використовуються для управління потоком програми. Ось деякі загальні структури управління в JavaScript:

- `if` оператор: Використовується для виконання блоку коду, якщо умова є істинною.
- `else` оператор: Використовується для виконання блоку коду, якщо умова в операторі `if` є хибною.
- `for` цикл: Використовується для виконання блоку коду певну кількість разів.
- `while` цикл: Використовується для виконання блоку коду, поки умова є істинною.

## 6. Функції

Функції - це багаторазові блоки коду, які виконують певне завдання. Для визначення функції в JavaScript можна використовувати ключове слово `function`. Ось приклад:

```javascript
function greet(name) {
  return "Привіт, " + name + "!";
}

console.log(greet("Аліса")); // Вивід: Привіт, Аліса!
```

## 7. Висновок

У цій лекції ми розглянули основи JavaScript, включаючи його історію, синтаксис, змінні, типи даних, оператори, структури управління та функції. Ці основні концепції допоможуть вам розпочати програмування на JavaScript та підготують вас до більш складних тем у майбутніх лекціях.

## Додаткове завдання

Додайте кнопку з id `myFirstButtonId` до HTML прикладу та оновіть інструкції, щоб згадати про подію кліку на цій кнопці.

```html
<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Основи JavaScript</title>
  <script src="lecture1.js" defer></script>
</head>
<body>
  <h1>Основи JavaScript</h1>
  <button id="myFirstButtonId">Натисніть мене</button>
</body>
</html>
```

Код JavaScript для обробки події кліку на кнопці буде додано у файлі `lecture1.js`.

## Summary of all materials in the lecture folder

- `lecture1-Basics-JavaScript.md`: Основний текст лекції з основ JavaScript.
- `lecture1-Basics-JavaScript.pdf`: Презентація лекції у форматі PDF.
- `lecture1-Basics-JavaScript.js`: Приклади коду JavaScript, що використовуються у лекції.
- `exercise1-Create-Simple-Website.md`: Вправа для створення простого веб-сайту з кнопкою "Home work".
</file>

<file path="lectures/lesson2-Math-Strings-Logical-Operators/lecture2-Math-Strings-Logical-Operators.md">
# Лекція 2: Математика, Рядки та Логічні Оператори в JavaScript

[PDF Презентація Лекції 2](./lecture2-Math-Strings-Logical-Operators.pdf)

https://dashboard.blooket.com/set/678d62444f0e67eed87422c2

Ласкаво просимо на другу лекцію курсу вивчення JavaScript! У цій лекції ми розглянемо базову математику, десяткові числа, залишок від ділення, скорочені оператори, роботу з рядками, логічні оператори та умовні конструкції.

## Зміст

1. Базова математика
2. Десяткові числа
3. Залишок від ділення
4. Скорочені оператори
5. Робота з рядками
6. Логічні оператори та умовні конструкції
7. Визначення віку та побажання
8. Висновок

## 1. Базова математика

Додавання, віднімання, множення та ділення є основними арифметичними операціями в JavaScript. Ось приклади:

```javascript
let a = 10;
let b = 5;

let додавання = a + b; // 15
let віднімання = a - b; // 5
let множення = a * b; // 50
let ділення = a / b; // 2
```

Порядок виконання операцій визначається стандартними математичними правилами. Використання операторів `++` і `--` дозволяє збільшувати або зменшувати значення змінної на 1:

```javascript
let x = 5;
x++; // 6
x--; // 5
```

## 2. Десяткові числа

JavaScript підтримує роботу з числами з плаваючою комою. Однак, при виконанні операцій із десятковими числами можуть виникати проблеми точності:

```javascript
let десяткове1 = 0.1;
let десяткове2 = 0.2;
let результат = десяткове1 + десяткове2; // 0.30000000000000004
```

Множення та ділення з використанням десяткових чисел:

```javascript
let множенняДесяткових = 0.1 * 0.2; // 0.020000000000000004
let діленняДесяткових = 0.3 / 0.1; // 3
```

## 3. Залишок від ділення

Оператор `%` використовується для отримання залишку від ділення:

```javascript
let залишок = 10 % 3; // 1
```

## 4. Скорочені оператори

Скорочені оператори, такі як `+=`, `-=`, `*=`, `/=`, дозволяють оновлювати значення змінних:

```javascript
let y = 10;
y += 5; // 15
y -= 3; // 12
y *= 2; // 24
y /= 4; // 6
```

## 5. Робота з рядками

Основи роботи з рядками включають створення, об’єднання та вставку змінних у рядки:

```javascript
let привітання = "Привіт";
let ім'я = "Світ";
let повнеПривітання = привітання + ", " + ім'я + "!"; // "Привіт, Світ!"
```

Квадратні дужки використовуються для доступу до символів рядка за індексом:

```javascript
let символ = повнеПривітання[0]; // "П"
```

### Екранування символів у рядках

Для уникнення проблем із використанням спеціальних символів, таких як лапки, використовується символ екранування (`\`):

```javascript
let рядок = "Це \"цитата\" у рядку.";
```

### Методи роботи з рядками

Використання вбудованих методів для визначення довжини рядка та створення нових рядків:

```javascript
let довжинаРядка = повнеПривітання.length; // 12
let новийРядок = повнеПривітання.replace("Світ", "JavaScript"); // "Привіт, JavaScript!"
```

### Незмінність рядків

У JavaScript рядки є незмінними, тобто їх не можна змінити після створення. Будь-яка зміна рядка створює новий рядок, а оригінальний залишається незмінним.

### Пошук символу за індексом

Використовуючи індекс символу, можна знайти будь-який символ у рядку. Індекси починаються з нуля, тобто перший символ має індекс 0.

### Заповнення слів

Вставка змінних у текстові шаблони дозволяє створювати динамічні речення. Це використовується для створення інтерактивних текстових додатків або ігор.

## 6. Логічні оператори та умовні конструкції

### Логічні значення

Логічні значення — це два можливі значення: `true` або `false`, які використовуються для перевірки умов. Вони є основою для керування потоком виконання програм.

### Умовні оператори

Оператор `if` дозволяє виконувати код, якщо певна умова є істинною (`true`). Оператор `else` задає альтернативний блок коду, який виконується, якщо умова в `if` є хибною (`false`):

```javascript
let вік = 18;

if (вік >= 18) {
  console.log("Ви повнолітні.");
} else {
  console.log("Ви неповнолітні.");
}
```

### Оператори рівності

Оператори рівності (`==` і `===`) використовуються для порівняння значень. `==` перевіряє тільки значення, тоді як `===` перевіряє також тип даних:

```javascript
let число = 5;
let рядокЧисло = "5";

console.log(число == рядокЧисло); // true
console.log(число === рядокЧисло); // false
```

### Оператори І та АБО

Оператори `&&` (І) та `||` (АБО) дозволяють об’єднувати кілька умов. `&&` повертає `true`, якщо всі умови істинні, а `||` — якщо хоча б одна умова істинна:

```javascript
let a = true;
let b = false;

console.log(a && b); // false
console.log(a || b); // true
```

### Логічний порядок у конструкціях if-else

Умови у конструкції `if-else` перевіряються зверху вниз, тому важливо розташовувати їх у логічно правильному порядку для забезпечення коректного виконання коду.

### Тернарний оператор

Тернарний оператор (`? :`) дозволяє скоротити умовну конструкцію `if-else` до одного рядка. Використовується для повернення одного з двох значень залежно від умови:

```javascript
let вік = 18;
let статус = (вік >= 18) ? "повнолітній" : "неповнолітній";
console.log(статус); // "повнолітній"
```

### Оператор switch

`Switch` — це конструкція, яка дозволяє перевіряти одну змінну на відповідність кільком можливим значенням. Замість багатьох `if-else` використовується більш компактна структура:

```javascript
let деньТижня = 3;
let назваДня;

switch (деньТижня) {
  case 1:
    назваДня = "Понеділок";
    break;
  case 2:
    назваДня = "Вівторок";
    break;
  case 3:
    назваДня = "Середа";
    break;
  case 4:
    назваДня = "Четвер";
    break;
  case 5:
    назваДня = "П'ятниця";
    break;
  case 6:
    назваДня = "Субота";
    break;
  case 7:
    назваДня = "Неділя";
    break;
  default:
    назваДня = "Невідомий день";
}

console.log(назваДня); // "Середа"
```

## Summary of all materials in the lecture folder

- `lecture2-Math-Strings-Logical-Operators.md`: Основний текст лекції з математики, рядків та логічних операторів у JavaScript.
- `lecture2-Math-Strings-Logical-Operators.pdf`: Презентація лекції у форматі PDF.
- `lecture2-Math-Strings-Logical-Operators.js`: Приклади коду JavaScript, що використовуються у лекції.
- `exercise2-Guess-the-Number-Game.md`: Вправа для створення гри "Вгадати число".
</file>

<file path="lectures/lesson3-Functions-Arguments-Parameters-Scope-Return/lecture3-Functions-Arguments-Parameters-Scope-Return.md">
# Лекція 3: Функції, Аргументи, Параметри за замовчуванням, Область видимості та Повернення значень

[PDF Презентація Лекції 3](./lecture3-Functions-Arguments-Parameters-Scope-Return.pdf)

https://dashboard.blooket.com/set/67e167d29a304ed139031590

Ласкаво просимо на третю лекцію курсу вивчення JavaScript! У цій лекції ми розглянемо функції, аргументи, параметри за замовчуванням, область видимості та повернення значень.

## Зміст

1. Функції
2. Аргументи
3. Параметри за замовчуванням
4. Область видимості
5. Повернення значень
6. Висновок

## 1. Функції

Функції дозволяють створювати повторно використовувані блоки коду, які можна викликати багаторазово. Це сприяє спрощенню структури програми та зменшенню дублювання коду.

```javascript
function greeting() {
  console.log("Привіт, світ!");
}

greeting(); // Виведе: Привіт, світ!
```

## 2. Аргументи

Аргументи — це значення, які передаються функції під час її виклику. Вони дозволяють налаштовувати поведінку функції залежно від переданих даних.

```javascript
function greetingWithName(name) {
  console.log("Привіт, " + name + "!");
}

greetingWithName("Аліса"); // Виведе: Привіт, Аліса!
```

## 3. Параметри за замовчуванням

Параметри за замовчуванням дозволяють задавати значення для параметрів функції, якщо вони не були передані під час виклику. Це забезпечує надійність та запобігає помилкам.

```javascript
function greetingWithDefaultParameter(name = "Світ") {
  console.log("Привіт, " + name + "!");
}

greetingWithDefaultParameter(); // Виведе: Привіт, Світ!
greetingWithDefaultParameter("Боб"); // Виведе: Привіт, Боб!
```

## 4. Область видимості

### Глобальна область видимості

Змінні, оголошені поза функціями (var), мають глобальну область видимості. Вони доступні для використання у будь-якій частині програми.

```javascript
var globalVariable = "Я глобальна";

function showGlobalVariable() {
  console.log(globalVariable);
}

showGlobalVariable(); // Виведе: Я глобальна
```

### Локальна область видимості

Змінні, оголошені всередині функції (let), мають локальну область видимості. Вони доступні лише в межах цієї функції та зникають після її завершення.

```javascript
function localFunction() {
  let localVariable = "Я локальна";
  console.log(localVariable);
}

localFunction(); // Виведе: Я локальна
// console.log(localVariable); // Викличе помилку, оскільки localVariable не доступна поза функцією
```

### Глобальна vs Локальна область видимості у функціях

Коли у функції є змінні з однаковою назвою, що існують у глобальній і локальній області, пріоритет має локальна змінна.

```javascript
var variable = "Глобальна змінна";

function showVariable() {
  let variable = "Локальна змінна";
  console.log(variable);
}

showVariable(); // Виведе: Локальна змінна
console.log(variable); // Виведе: Глобальна змінна
```

### Повернення значень

Функції можуть повертати значення за допомогою оператора return. Це значення можна використовувати поза межами функції для подальших обчислень або дій.

```javascript
function add(a, b) {
  return a + b;
}

let result = add(5, 3);
console.log(result); // Виведе: 8
```

Функції, які не містять оператора return, повертають undefined за замовчуванням. Це вказує на відсутність повернутого значення.

```javascript
function noReturn() {
  console.log("Ця функція нічого не повертає");
}

let resultNoReturn = noReturn(); // Виведе: Ця функція нічого не повертає
console.log(resultNoReturn); // Виведе: undefined
```


### Шаблон раннього виходу для функцій

Шаблон раннього виходу дозволяє завершити виконання функції, якщо умова виконується. Це покращує продуктивність і робить код більш зрозумілим:

```javascript
function перевіритиВік(вік) {
  if (вік < 0) {
    return "Невірний вік";
  }
  if (вік < 18) {
    return "Ви неповнолітні";
  }
  return "Ви повнолітні";
}

console.log(перевіритиВік(20)); // "Ви повнолітні"
```

## 6. Висновок

У цій лекції ми розглянули функції, аргументи, параметри за замовчуванням, область видимості та повернення значень. Ці основні концепції допоможуть вам розпочати програмування на JavaScript та підготують вас до більш складних тем у майбутніх лекціях.

## Дебагінг у Chrome

### Відкриття консолі

Щоб відкрити консоль у Chrome, виконайте наступні кроки:
1. Натисніть правою кнопкою миші на веб-сторінці.
2. Виберіть "Переглянути код" або натисніть `Ctrl+Shift+I` (Windows/Linux) або `Cmd+Option+I` (Mac).
3. Перейдіть на вкладку "Console".

### Вхід у дебагер

Щоб увійти у дебагер у Chrome, виконайте наступні кроки:
1. Відкрийте консоль, як описано вище.
2. Перейдіть на вкладку "Sources".
3. Виберіть файл JavaScript, який ви хочете відлагоджувати.
4. Натисніть на номер рядка, де ви хочете встановити точку зупину (breakpoint).

### Встановлення watch виразів та брекпоінтів

Щоб встановити watch вирази та брекпоінти у Chrome, виконайте наступні кроки:
1. Відкрийте консоль, як описано вище.
2. Перейдіть на вкладку "Sources".
3. Виберіть файл JavaScript, який ви хочете відлагоджувати.
4. Натисніть на номер рядка, де ви хочете встановити точку зупину (breakpoint).
5. Перейдіть на вкладку "Watch" у правій частині вікна.
6. Натисніть на кнопку "+" і введіть вираз, який ви хочете відстежувати.

## Summary of all materials in the lecture folder

- `lecture3-Functions-Arguments-Parameters-Scope-Return.md`: Основний текст лекції з функцій, аргументів, параметрів за замовчуванням, області видимості та повернення значень у JavaScript.
- `lecture3-Functions-Arguments-Parameters-Scope-Return.pdf`: Презентація лекції у форматі PDF.
- `lecture3-Functions-Arguments-Parameters-Scope-Return.js`: Приклади коду JavaScript, що використовуються у лекції.
- `exercise3-Functions-Arguments-Parameters-Scope-Return.md`: Вправа для практики роботи з функціями, аргументами, параметрами за замовчуванням, областю видимості та поверненням значень.
</file>

<file path="lectures/lesson6-DOM-Basics/lecture6-DOM-Basics.md">
# Основи роботи з DOM (DOM Basics)

[PDF Презентація Лекції 6](./lecture6-DOM-Basics.pdf)

https://dashboard.blooket.com/set/67bf7f816607731e0e60e8ca

## Що таке DOM?

DOM (Document Object Model) — це програмна інтерфейсна модель для HTML-документів, яка представляє структуру веб-сторінки як дерево об’єктів. JavaScript може використовувати DOM для маніпуляцій елементами сторінки, їх створення, зміни або видалення в реальному часі. DOM — це спосіб представлення HTML-документа у вигляді дерева, де кожен елемент сторінки є вузлом (node). Через DOM JavaScript отримує доступ до HTML і дозволяє змінювати як структуру сторінки, так і її стилі або вміст.

## Доступ до елементів

### document.querySelector

Метод `document.querySelector` вибирає перший елемент, який відповідає заданому селектору (клас, ідентифікатор, тег).

```javascript
const element = document.querySelector('.my-class');
```

### document.querySelectorAll

Метод `document.querySelectorAll` вибирає всі елементи, які відповідають заданому селектору, і повертає NodeList.

```javascript
const elements = document.querySelectorAll('.my-class');
```

### getElementById

Метод `getElementById` вибирає елемент за унікальним ідентифікатором.

```javascript
const element = document.getElementById('my-id');
```

### getElementsByClassName

Метод `getElementsByClassName` вибирає елементи за класом.

```javascript
const elements = document.getElementsByClassName('my-class');
```

### getElementsByTagName

Метод `getElementsByTagName` вибирає елементи за тегом.

```javascript
const elements = document.getElementsByTagName('div');
```

## Зміна вмісту

### innerHTML

Властивість `innerHTML` змінює весь HTML-вміст елемента.

```javascript
const element = document.getElementById('my-id');
element.innerHTML = '<p>Новий вміст</p>';
```

### textContent

Властивість `textContent` змінює текстовий вміст елемента без форматування HTML.

```javascript
const element = document.getElementById('my-id');
element.textContent = 'Новий текстовий вміст';
```

## Додавання та видалення елементів

### createElement

Метод `createElement` створює новий елемент.

```javascript
const newElement = document.createElement('div');
```

### appendChild

Метод `appendChild` додає новий елемент як дочірній до існуючого.

```javascript
const parentElement = document.getElementById('parent-id');
const newElement = document.createElement('div');
parentElement.appendChild(newElement);
```

### removeChild

Метод `removeChild` видаляє елемент зі сторінки.

```javascript
const parentElement = document.getElementById('parent-id');
const childElement = document.getElementById('child-id');
parentElement.removeChild(childElement);
```

## Обробка подій

### addEventListener

Метод `addEventListener` додає слухача подій до елемента. Наприклад, реагування на кліки, наведення миші, зміну вмісту.

```javascript
const button = document.getElementById('my-button');
button.addEventListener('click', function() {
  alert('Кнопка натиснута!');
});
```

## Атрибути та стилі

### Робота з атрибутами

Методи `getAttribute` та `setAttribute` використовуються для отримання або встановлення значення атрибута.

```javascript
const element = document.getElementById('my-id');
const value = element.getAttribute('data-value');
element.setAttribute('data-value', 'нове значення');
```

Метод `removeAttribute` видаляє атрибут.

```javascript
const element = document.getElementById('my-id');
element.removeAttribute('data-value');
```

### Зміна стилів

Властивість `style` змінює інлайн-стилі елемента.

```javascript
const element = document.getElementById('my-id');
element.style.color = 'red';
```

Властивість `classList` дозволяє додавати, видаляти або перемикати класи.

```javascript
const element = document.getElementById('my-id');
element.classList.add('new-class');
element.classList.remove('old-class');
element.classList.toggle('active');
```

## Взаємодія з формами

### value

Властивість `value` використовується для отримання або зміни значення елементів форм (текстові поля, чекбокси тощо).

```javascript
const input = document.getElementById('my-input');
const value = input.value;
input.value = 'нове значення';
```

### Події форм

Подія `submit` використовується для обробки даних, введених у форми.

```javascript
const form = document.getElementById('my-form');
form.addEventListener('submit', function(event) {
  event.preventDefault();
  alert('Форма відправлена!');
});
```

## Навігація DOM

DOM дозволяє переміщатися між вузлами сторінки.

### parentNode

Властивість `parentNode` отримує батьківський елемент.

```javascript
const childElement = document.getElementById('child-id');
const parentElement = childElement.parentNode;
```

### childNodes

Властивість `childNodes` надає доступ до дочірніх вузлів.

```javascript
const parentElement = document.getElementById('parent-id');
const childNodes = parentElement.childNodes;
```

### nextSibling

Властивість `nextSibling` отримує наступний сусідній вузол.

```javascript
const element = document.getElementById('my-id');
const nextSibling = element.nextSibling;
```

### previousSibling

Властивість `previousSibling` отримує попередній сусідній вузол.

```javascript
const element = document.getElementById('my-id');
const previousSibling = element.previousSibling;
```

## Summary of all materials in the lecture folder

- `lecture6-DOM-Basics.md`: Основний текст лекції з основ роботи з DOM.
- `lecture6-DOM-Basics.pdf`: Презентація лекції у форматі PDF.
- `DOM-Questions.csv`: Питання для перевірки знань з основ роботи з DOM.
- `exercise6-DOM-Basics.md`: Вправа для практики роботи з DOM.
</file>

<file path="questions.csv">
Питання,Варіант 1 (вірний),Варіант 2,Варіант 3,Варіант 4
Що таке JavaScript?,Мова програмування,Браузер,Операційна система,Текстовий редактор
Як запустити JavaScript у браузері?,Використовуючи консоль розробника,Використовуючи текстовий редактор,Використовуючи графічний редактор,Використовуючи файловий менеджер
Який символ використовується для однорядкових коментарів у JavaScript?,//,/*,<!--,-->
Який символ використовується для багаторядкових коментарів у JavaScript?,/* */,//,<!-- -->,{}
Яке ключове слово використовується для оголошення змінної, значення якої не можна змінити?,const,let,var,function
Яке ключове слово використовується для оголошення змінної, значення якої можна змінити?,let,const,var,function
Яке ключове слово використовується для оголошення глобальної змінної?,var,let,const,function
Який тип даних використовується для зберігання текстових значень?,string,number,boolean,object
Який тип даних використовується для зберігання числових значень?,number,string,boolean,object
Який тип даних використовується для зберігання логічних значень?,boolean,number,string,object
Який тип даних використовується для зберігання значення null?,null,undefined,boolean,object
Який тип даних використовується для зберігання значення undefined?,undefined,null,boolean,object
Який оператор використовується для додавання чисел?,+,-,*,/
Який оператор використовується для віднімання чисел?,-,+,*,/
Який оператор використовується для множення чисел?,*,+,-,/
Який оператор використовується для ділення чисел?,/,+,-,*
Який оператор використовується для отримання залишку від ділення?,%,+,-,*
Який оператор використовується для збільшення значення змінної на 1?,++,--,+=,-=
Який оператор використовується для зменшення значення змінної на 1?,--,++,+=,-=
Який метод використовується для визначення довжини рядка?,length,size,count,measure
Який метод використовується для заміни частини рядка?,replace,change,swap,modify
Який метод використовується для перетворення рядка в масив?,split,join,slice,splice
Який метод використовується для об'єднання масиву в рядок?,join,split,slice,splice
Який метод використовується для додавання елементів до кінця масиву?,push,pop,shift,unshift
Який метод використовується для видалення останнього елемента з масиву?,pop,push,shift,unshift
Який метод використовується для видалення першого елемента з масиву?,shift,pop,push,unshift
Який метод використовується для додавання елементів на початок масиву?,unshift,push,pop,shift
Який метод використовується для створення нового масиву з результатами виклику функції для кожного елемента масиву?,map,filter,reduce,forEach
Який метод використовується для створення нового масиву з усіма елементами, які пройшли перевірку, задану у функції?,filter,map,reduce,forEach
Який метод використовується для зведення масиву до одного значення?,reduce,map,filter,forEach
Який цикл використовується для виконання коду доти, доки задана умова залишається істинною?,while,for,do...while,for...of
Який цикл використовується для виконання коду хоча б один раз, незалежно від умови?,do...while,while,for,for...of
Який цикл використовується для ітерації по елементах масивів або інших ітеративних об’єктів?,for...of,for,while,do...while
Який цикл використовується для ітерації по ключах об’єкта?,for...in,for,while,do...while
Який оператор використовується для перевірки рівності значень?,==,===,!=,!== 
Який оператор використовується для перевірки рівності значень і типів?,===,==,!=,!== 
Який оператор використовується для перевірки нерівності значень?,!=,==,===,!== 
Який оператор використовується для перевірки нерівності значень і типів?,!==,==,===,!= 
Який оператор використовується для об'єднання кількох умов, де всі умови повинні бути істинними?,&&,||,!,?? 
Який оператор використовується для об'єднання кількох умов, де хоча б одна умова повинна бути істинною?,||,&&,!,?? 
Який оператор використовується для перевірки, чи значення є істинним?,!,&&,||,?? 
Який оператор використовується для перевірки, чи значення є хибним?,!,&&,||,?? 
Який оператор використовується для скорочення умовної конструкції if-else до одного рядка,? :,if,else,switch 
Який оператор використовується для перевірки однієї змінної на відповідність кільком можливим значенням?,switch,if,else,? : 
Який метод використовується для додавання слухача подій до елемента?,addEventListener,attachEvent,on,bind 
Який метод використовується для видалення слухача подій з елемента?,removeEventListener,detachEvent,off,unbind 
Який метод використовується для створення нового елемента?,createElement,appendChild,removeChild,insertBefore 
Який метод використовується для додавання нового елемента як дочірнього до існуючого?,appendChild,createElement,removeChild,insertBefore 
Який метод використовується для видалення елемента зі сторінки?,removeChild,createElement,appendChild,insertBefore 
Який метод використовується для вставки нового елемента перед іншим елементом?,insertBefore,createElement,appendChild,removeChild 
Який метод використовується для отримання значення атрибута?,getAttribute,setAttribute,removeAttribute,hasAttribute 
Який метод використовується для встановлення значення атрибута?,setAttribute,getAttribute,removeAttribute,hasAttribute 
Який метод використовується для видалення атрибута?,removeAttribute,getAttribute,setAttribute,hasAttribute 
Який метод використовується для перевірки наявності атрибута?,hasAttribute,getAttribute,setAttribute,removeAttribute 
Який метод використовується для зміни інлайн-стилів елемента?,style,classList,setAttribute,getAttribute 
Який метод використовується для додавання класу до елемента?,classList.add,classList.remove,classList.toggle,classList.contains 
Який метод використовується для видалення класу з елемента?,classList.remove,classList.add,classList.toggle,classList.contains 
Який метод використовується для перемикання класу на елементі?,classList.toggle,classList.add,classList.remove,classList.contains 
Який метод використовується для перевірки наявності класу на елементі?,classList.contains,classList.add,classList.remove,classList.toggle 
Який метод використовується для отримання значення елемента форми?,value,textContent,innerHTML,getAttribute 
Який метод використовується для зміни значення елемента форми?,value,textContent,innerHTML,setAttribute 
Який метод використовується для обробки даних, введених у форми?,submit,reset,validate,process 
Який метод використовується для отримання батьківського елемента?,parentNode,childNodes,nextSibling,previousSibling 
Який метод використовується для отримання дочірніх вузлів?,childNodes,parentNode,nextSibling,previousSibling 
Який метод використовується для отримання сусіднього вузла?,nextSibling,parentNode,childNodes,previousSibling 
Який метод використовується для отримання попереднього вузла?,previousSibling,parentNode,childNodes,nextSibling 
Який метод використовується для створення нового об’єкта?,Object.create,Object.assign,Object.defineProperty,Object.freeze 
Який метод використовується для копіювання властивостей з одного об’єкта в інший?,Object.assign,Object.create,Object.defineProperty,Object.freeze 
Який метод використовується для визначення властивості об’єкта?,Object.defineProperty,Object.create,Object.assign,Object.freeze 
Який метод використовується для заморожування об’єкта?,Object.freeze,Object.create,Object.assign,Object.defineProperty 
Який метод використовується для перевірки наявності властивості в об’єкті?,hasOwnProperty,propertyIsEnumerable,isPrototypeOf,toString 
Який метод використовується для перевірки, чи властивість є власною властивістю об’єкта?,hasOwnProperty,propertyIsEnumerable,isPrototypeOf,toString 
Який метод використовується для перевірки, чи властивість є перелічуваною?,propertyIsEnumerable,hasOwnProperty,isPrototypeOf,toString 
Який метод використовується для перевірки, чи об’єкт є прототипом іншого об’єкта?,isPrototypeOf,hasOwnProperty,propertyIsEnumerable,toString 
Який метод використовується для перетворення об’єкта в рядок?,toString,valueOf,toLocaleString,toJSON 
Який метод використовується для перетворення об’єкта в JSON-рядок?,JSON.stringify,JSON.parse,toString,valueOf 
Який метод використовується для перетворення JSON-рядка в об’єкт?,JSON.parse,JSON.stringify,toString,valueOf 
Який метод використовується для створення нового екземпляра класу?,new,create,define,construct 
Який метод використовується для виклику методу батьківського класу?,super,this,parent,base 
Який метод використовується для перевизначення методу в дочірньому класі?,override,super,this,parent 
Який метод використовується для створення статичного методу в класі?,static,class,method,function 
Який метод використовується для створення приватного поля в класі?,#,private,_,__ 
Який метод використовується для створення гетера в класі?,get,set,define,create 
Який метод використовується для створення сетера в класі?,set,get,define,create 
Який метод використовується для створення нового масиву?,Array.from,Array.of,Array.isArray,Array.prototype 
Який метод використовується для перевірки, чи є значення масивом?,Array.isArray,Array.from,Array.of,Array.prototype 
Який метод використовується для створення масиву з аргументів функції?,Array.from,Array.of,Array.isArray,Array.prototype 
Який метод використовується для створення масиву з елементів?,Array.of,Array.from,Array.isArray,Array.prototype 
Який метод використовується для додавання елементів до масиву?,Array.prototype.push,Array.prototype.pop,Array.prototype.shift,Array.prototype.unshift 
Який метод використовується для видалення елементів з масиву?,Array.prototype.pop,Array.prototype.push,Array.prototype.shift,Array.prototype.unshift 
Який метод використовується для видалення першого елемента з масиву?,Array.prototype.shift,Array.prototype.pop,Array.prototype.push,Array.prototype.unshift 
Який метод використовується для додавання елементів на початок масиву?,Array.prototype.unshift,Array.prototype.push,Array.prototype.pop,Array.prototype.shift 
Який метод використовується для створення нового масиву з результатами виклику функції для кожного елемента масиву?,Array.prototype.map,Array.prototype.filter,Array.prototype.reduce,Array.prototype.forEach 
Який метод використовується для створення нового масиву з усіма елементами, які пройшли перевірку, задану у функції?,Array.prototype.filter,Array.prototype.map,Array.prototype.reduce,Array.prototype.forEach 
Який метод використовується для зведення масиву до одного значення?,Array.prototype.reduce,Array.prototype.map,Array.prototype.filter,Array.prototype.forEach 
Який метод використовується для виконання функції для кожного елемента масиву?,Array.prototype.forEach,Array.prototype.map,Array.prototype.filter,Array.prototype.reduce 
Який метод використовується для сортування елементів масиву?,Array.prototype.sort,Array.prototype.reverse,Array.prototype.slice,Array.prototype.splice 
Який метод використовується для зворотного порядку елементів масиву?,Array.prototype.reverse,Array.prototype.sort,Array.prototype.slice,Array.prototype.splice 
Який метод використовується для створення нового масиву з частини існуючого масиву?,Array.prototype.slice,Array.prototype.splice,Array.prototype.sort,Array.prototype.reverse 
Який метод використовується для видалення або заміни існуючих елементів масиву?,Array.prototype.splice,Array.prototype.slice,Array.prototype.sort,Array.prototype.reverse 
Який метод використовується для об'єднання двох або більше масивів?,concat,Array.prototype.join,Array.prototype.push,Array.prototype.pop 
Який метод використовується для перетворення масиву в рядок?,Array.prototype.join,concat,Array.prototype.push,Array.prototype.pop 
Який метод використовується для перевірки, чи містить масив певний елемент?,Array.prototype.includes,Array.prototype.indexOf,Array.prototype.find,Array.prototype.filter 
Який метод використовується для пошуку індексу першого входження елемента в масив?,Array.prototype.indexOf,Array.prototype.includes,Array.prototype.find,Array.prototype.filter 
Який метод використовується для пошуку індексу останнього входження елемента в масив?,Array.prototype.lastIndexOf,Array.prototype.indexOf,Array.prototype.includes,Array.prototype.find 
Який метод використовується для пошуку першого елемента, що задовольняє умову?,Array.prototype.find,Array.prototype.filter,Array.prototype.map,Array.prototype.reduce 
Який метод використовується для пошуку індексу першого елемента, що задовольняє умову?,Array.prototype.findIndex,Array.prototype.find,Array.prototype.filter,Array.prototype.map 
Який метод використовується для перевірки, чи кожен елемент масиву задовольняє умову?,Array.prototype.every,Array.prototype.some,Array.prototype.find,Array.prototype.filter 
Який метод використовується для перевірки, чи хоча б один елемент масиву задовольняє умову?,Array.prototype.some,Array.prototype.every,Array.prototype.find,Array.prototype.filter 
Що таке DOM?,Document Object Model,Data Object Model,Document Oriented Model,Data Oriented Model
Яка мета DOM?,To represent the structure of a web document,To style web pages,To store data,To manage user sessions
Який метод використовується для вибору елемента за його ID?,getElementById,querySelector,getElementsByClassName,getElementsByTagName
Який метод використовується для вибору елементів за їх класом?,getElementsByClassName,getElementById,querySelector,getElementsByTagName
Який метод використовується для вибору елементів за їх тегом?,getElementsByTagName,getElementById,querySelector,getElementsByClassName
Який метод використовується для вибору першого елемента, що відповідає CSS-селектору?,querySelector,getElementById,getElementsByClassName,getElementsByTagName
Який метод використовується для вибору всіх елементів, що відповідають CSS-селектору?,querySelectorAll,getElementById,getElementsByClassName,getElementsByTagName
Як змінити текстовий вміст елемента?,textContent,innerHTML,outerHTML,value
Як змінити HTML-вміст елемента?,innerHTML,textContent,outerHTML,value
Як додати новий елемент до DOM?,createElement,removeChild,getElementById,querySelector
Як видалити елемент з DOM?,removeChild,createElement,getElementById,querySelector
Як додати слухача подій до елемента?,addEventListener,removeEventListener,createElement,querySelector
Як видалити слухача подій з елемента?,removeEventListener,addEventListener,createElement,querySelector
Як отримати значення атрибута елемента?,getAttribute,setAttribute,removeAttribute,hasAttribute
Як встановити значення атрибута елемента?,setAttribute,getAttribute,removeAttribute,hasAttribute
Як видалити атрибут з елемента?,removeAttribute,getAttribute,setAttribute,hasAttribute
Як перевірити, чи має елемент певний атрибут?,hasAttribute,getAttribute,setAttribute,removeAttribute
Як змінити інлайн-стилі елемента?,style,classList,setAttribute,getAttribute
Як додати клас до елемента?,classList.add,classList.remove,classList.toggle,classList.contains
Як видалити клас з елемента?,classList.remove,classList.add,classList.toggle,classList.contains
Як перемикати клас на елементі?,classList.toggle,classList.add,classList.remove,classList.contains
Як перевірити, чи має елемент певний клас?,classList.contains,classList.add,classList.remove,classList.toggle
Як отримати батьківський елемент?,parentNode,childNodes,nextSibling,previousSibling
Як отримати дочірні вузли елемента?,childNodes,parentNode,nextSibling,previousSibling
Як отримати наступний сусідній вузол елемента?,nextSibling,parentNode,childNodes,previousSibling
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.map(num => num * 2).filter(num => num > 4); console.log(result);,[6, 8],[2, 4, 6, 8],[4, 6, 8],[8, 6]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.filter(num => num % 2 === 0); console.log(result);,[2, 4],[1, 3],[1, 2, 3, 4],[4, 2]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.reduce((acc, num) => acc + num, 0); console.log(result);,10,24,0,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.find(num => num > 2); console.log(result);,3,1,2,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.every(num => num > 0); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.some(num => num > 3); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.slice(1, 3); console.log(result);,[2, 3],[1, 2],[3, 4],[1, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.splice(1, 2); console.log(result);,[2, 3],[1, 2],[3, 4],[1, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.concat([5, 6]); console.log(result);,[1, 2, 3, 4, 5, 6],[5, 6],[1, 2, 3, 4],[6, 5, 4, 3, 2, 1]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.join('-'); console.log(result);,1-2-3-4,1,2,3,4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.reverse(); console.log(result);,[4, 3, 2, 1],[1, 2, 3, 4],[2, 3, 4, 1],[4, 1, 2, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.sort((a, b) => b - a); console.log(result);,[4, 3, 2, 1],[1, 2, 3, 4],[2, 3, 4, 1],[4, 1, 2, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.findIndex(num => num > 2); console.log(result);,2,1,3,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.indexOf(3); console.log(result);,2,1,3,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.includes(2); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.fill(0); console.log(result);,[0, 0, 0, 0],[1, 2, 3, 4],[0, 1, 2, 3],[1, 2, 3, 0]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.copyWithin(1, 0); console.log(result);,[1, 1, 2, 3],[1, 2, 3, 4],[2, 3, 4, 1],[1, 1, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flat(); console.log(result);,[1, 2, 3, 4],[1, 2],[2, 3],[1, 3]
What will be logged to the console? const numbers = [1, [2, 3], 4]; const result = numbers.flat(); console.log(result);,[1, 2, 3, 4],[1, [2, 3], 4],[2, 3, 4],[1, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.toString(); console.log(result);,1,2,3,4,1-2-3-4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.valueOf(); console.log(result);,[1, 2, 3, 4],1,2,3,4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.toLocaleString(); console.log(result);,1,2,3,4,1-2-3-4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.toJSON(); console.log(result);,[1, 2, 3, 4],1,2,3,4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = Array.from(numbers); console.log(result);,[1, 2, 3, 4],1,2,3,4,1234,1 2 3 4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = Array.of(5, 6, 7); console.log(result);,[5, 6, 7],[1, 2, 3, 4],[6, 7, 8],[7, 8, 9]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = Array.isArray(numbers); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.push(5); console.log(result);,5,[1, 2, 3, 4, 5],4,[1, 2, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.pop(); console.log(result);,4,[1, 2, 3],3,[1, 2, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.shift(); console.log(result);,1,[2, 3, 4],2,[1, 2, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.unshift(0); console.log(result);,5,[0, 1, 2, 3, 4],4,[1, 2, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.map(num => num * 2); console.log(result);,[2, 4, 6, 8],[1, 2, 3, 4],[2, 3, 4, 5],[4, 6, 8, 10]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.filter(num => num > 2); console.log(result);,[3, 4],[1, 2],[2, 3, 4],[1, 3, 4]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.reduce((acc, num) => acc * num, 1); console.log(result);,24,10,1,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.find(num => num < 3); console.log(result);,1,2,3,4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.every(num => num < 5); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.some(num => num < 2); console.log(result);,true,false,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.slice(2); console.log(result);,[3, 4],[1, 2],[2, 3],[1, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.splice(2, 1); console.log(result);,[3],[1, 2],[2, 3],[1, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.concat([5, 6, 7]); console.log(result);,[1, 2, 3, 4, 5, 6, 7],[5, 6, 7],[1, 2, 3, 4],[6, 7, 8]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.join(' '); console.log(result);,1 2 3 4,1,2,3,4,1234,1-2-3-4
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.reverse(); console.log(result);,[4, 3, 2, 1],[1, 2, 3, 4],[2, 3, 4, 1],[4, 1, 2, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.sort((a, b) => a - b); console.log(result);,[1, 2, 3, 4],[4, 3, 2, 1],[2, 3, 4, 1],[4, 1, 2, 3]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.findIndex(num => num < 2); console.log(result);,0,1,2,3
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.indexOf(4); console.log(result);,3,2,1,0
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.includes(5); console.log(result);,false,true,undefined,null
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.fill(1, 2); console.log(result);,[1, 2, 1, 1],[1, 2, 3, 4],[1, 1, 1, 1],[1, 2, 3, 1]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.copyWithin(2, 0); console.log(result);,[1, 2, 1, 2],[1, 2, 3, 4],[2, 3, 4, 1],[1, 2, 1, 2]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * 2]); console.log(result);,[1, 2, 2, 4, 3, 6, 4, 8],[1, 2, 3, 4],[2, 4, 6, 8],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 1]); console.log(result);,[1, 2, 2, 3, 3, 4, 4, 5],[1, 2, 3, 4],[2, 3, 4, 5],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num - 1]); console.log(result);,[1, 0, 2, 1, 3, 2, 4, 3],[1, 2, 3, 4],[0, 1, 2, 3],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * num]); console.log(result);,[1, 1, 2, 4, 3, 9, 4, 16],[1, 2, 3, 4],[1, 4, 9, 16],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num / 2]); console.log(result);,[1, 0.5, 2, 1, 3, 1.5, 4, 2],[1, 2, 3, 4],[0.5, 1, 1.5, 2],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 2]); console.log(result);,[1, 3, 2, 4, 3, 5, 4, 6],[1, 2, 3, 4],[3, 4, 5, 6],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num - 2]); console.log(result);,[1, -1, 2, 0, 3, 1, 4, 2],[1, 2, 3, 4],[-1, 0, 1, 2],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * 3]); console.log(result);,[1, 3, 2, 6, 3, 9, 4, 12],[1, 2, 3, 4],[3, 6, 9, 12],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num / 3]); console.log(result);,[1, 0.3333333333333333, 2, 0.6666666666666666, 3, 1, 4, 1.3333333333333333],[1, 2, 3, 4],[0.3333333333333333, 0.6666666666666666, 1, 1.3333333333333333],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 3]); console.log(result);,[1, 4, 2, 5, 3, 6, 4, 7],[1, 2, 3, 4],[4, 5, 6, 7],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num - 3]); console.log(result);,[1, -2, 2, -1, 3, 0, 4, 1],[1, 2, 3, 4],[-2, -1, 0, 1],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * 4]); console.log(result);,[1, 4, 2, 8, 3, 12, 4, 16],[1, 2, 3, 4],[4, 8, 12, 16],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num / 4]); console.log(result);,[1, 0.25, 2, 0.5, 3, 0.75, 4, 1],[1, 2, 3, 4],[0.25, 0.5, 0.75, 1],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 4]); console.log(result);,[1, 5, 2, 6, 3, 7, 4, 8],[1, 2, 3, 4],[5, 6, 7, 8],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num - 4]); console.log(result);,[1, -3, 2, -2, 3, -1, 4, 0],[1, 2, 3, 4],[-3, -2, -1, 0],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * 5]); console.log(result);,[1, 5, 2, 10, 3, 15, 4, 20],[1, 2, 3, 4],[5, 10, 15, 20],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num / 5]); console.log(result);,[1, 0.2, 2, 0.4, 3, 0.6, 4, 0.8],[1, 2, 3, 4],[0.2, 0.4, 0.6, 0.8],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 5]); console.log(result);,[1, 6, 2, 7, 3, 8, 4, 9],[1, 2, 3, 4],[6, 7, 8, 9],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num - 5]); console.log(result);,[1, -4, 2, -3, 3, -2, 4, -1],[1, 2, 3, 4],[-4, -3, -2, -1],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num * 6]); console.log(result);,[1, 6, 2, 12, 3, 18, 4, 24],[1, 2, 3, 4],[6, 12, 18, 24],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num / 6]); console.log(result);,[1, 0.16666666666666666, 2, 0.3333333333333333, 3, 0.5, 4, 0.6666666666666666],[1, 2, 3, 4],[0.16666666666666666, 0.3333333333333333, 0.5, 0.6666666666666666],[1, 3, 5, 7]
What will be logged to the console? const numbers = [1, 2, 3, 4]; const result = numbers.flatMap(num => [num, num + 6]); console.log(result);,[1, 7, 2, 8, 3, 9, 4, 10],[1, 2
</file>

<file path="lectures/lesson4-Arrays-Loops/lecture4-Arrays-Loops.md">
# Лекція 4: Масиви та Цикли в JavaScript

[PDF Презентація Лекції 4](./lecture4-Arrays-Loops.pdf)

https://dashboard.blooket.com/set/67d72dde860458c8a75e6b92
https://dashboard.blooket.com/set/67e167d29a304ed139031590

Ласкаво просимо на четверту лекцію курсу вивчення JavaScript! У цій лекції ми розглянемо масиви та цикли, включаючи вкладені масиви, доступ до даних масиву, зміну даних масиву, доступ до багатовимірних масивів та різні типи циклів.

## Зміст

1. Вкладені масиви
2. Доступ до даних масиву
3. Зміна даних масиву
4. Доступ до багатовимірних масивів
5. Основні методи
6. Ітераційні методи масивів
7. Цикли
8. Висновок

## 1. Вкладені масиви

Масиви можуть містити інші масиви як свої елементи, утворюючи багатовимірні структури. Це зручно для представлення таблиць, матриць або складних даних.

```javascript
let nestedArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(nestedArray[0][1]); // Виведе: 2
```

## 2. Доступ до даних масиву

Елементи масиву доступні за їх індексами, починаючи з нуля. Це дозволяє отримувати або використовувати значення, які зберігаються в масиві.

```javascript
let array = [10, 20, 30, 40, 50];
console.log(array[2]); // Виведе: 30
```

## 3. Зміна даних масиву

Елементи масиву можуть бути змінені шляхом присвоєння нового значення за індексом. Це дозволяє оновлювати інформацію без створення нового масиву.

```javascript
array[2] = 35;
console.log(array[2]); // Виведе: 35
```

## 4. Доступ до багатовимірних масивів

Для доступу до елементів вкладених масивів використовується кілька індексів. Перший індекс вказує на масив, а другий — на елемент у цьому вкладеному масиві.

```javascript
let multiDimensionalArray = [
  [1, 2, 3],
  [4, 5, 6],
  [7, 8, 9]
];

console.log(multiDimensionalArray[1][2]); // Виведе: 6
```

## 5. Основні методи

### push()

Метод `push()` додає один або кілька елементів до кінця масиву і повертає нову довжину масиву.

```javascript
let fruits = ["яблуко", "банан"];
fruits.push("апельсин");
console.log(fruits); // ["яблуко", "банан", "апельсин"]
```

### pop()

Метод `pop()` видаляє останній елемент з масиву і повертає його.

```javascript
let fruits = ["яблуко", "банан", "апельсин"];
let lastFruit = fruits.pop();
console.log(lastFruit); // "апельсин"
console.log(fruits); // ["яблуко", "банан"]
```

### shift()

Метод `shift()` видаляє перший елемент масиву, а решта елементів зсуваються на одну позицію вліво.

```javascript
let fruits = ["яблуко", "банан", "апельсин"];
let firstFruit = fruits.shift();
console.log(firstFruit); // "яблуко"
console.log(fruits); // ["банан", "апельсин"]
```

### unshift()

Метод `unshift()` додає один або кілька елементів на початок масиву, зсуваючи всі інші елементи вправо.

```javascript
let fruits = ["банан", "апельсин"];
fruits.unshift("яблуко");
console.log(fruits); // ["яблуко", "банан", "апельсин"]
```

## 6. Ітераційні методи масивів

### map()

Метод `map()` створює новий масив з результатами виклику заданої функції для кожного елемента масиву.

```javascript
let numbers = [1, 2, 3, 4];
let doubled = numbers.map(function(num) {
  return num * 2;
});
console.log(doubled); // [2, 4, 6, 8]
```

### filter()

Метод `filter()` створює новий масив з усіма елементами, які пройшли перевірку, задану у функції.

```javascript
let numbers = [1, 2, 3, 4];
let evenNumbers = numbers.filter(function(num) {
  return num % 2 === 0;
});
console.log(evenNumbers); // [2, 4]
```

### reduce()

Метод `reduce()` застосовує функцію до кожного елемента масиву (зліва направо), щоб звести його до одного значення.

```javascript
let numbers = [1, 2, 3, 4];
let sum = numbers.reduce(function(total, num) {
  return total + num;
}, 0);
console.log(sum); // 10
```

## 7. Цикли

Цикли у JavaScript використовуються для виконання повторюваних дій, таких як обхід масивів або виконання коду до досягнення певної умови.

### Цикл while

Виконує код доти, доки задана умова залишається істинною. Якщо умова стає хибною, виконання циклу припиняється.

```javascript
let i = 0;
while (i < 5) {
  console.log("Цикл while: " + i);
  i++;
}
```

### Цикл do...while

Виконує код хоча б один раз, незалежно від умови, і перевіряє її лише після виконання першої ітерації.

```javascript
let j = 0;
do {
  console.log("Цикл do...while: " + j);
  j++;
} while (j < 5);
```

### Цикл for

Цикл із визначеною кількістю ітерацій, що включає ініціалізацію, перевірку умови і оновлення змінних у кожній ітерації.

```javascript
for (let k = 0; k < 5; k++) {
  console.log("Цикл for: " + k);
}
```

### Цикл for...of

Використовується для ітерації по елементах масивів або інших ітеративних об’єктів, забезпечуючи зручний доступ до значень.

```javascript
let iterableArray = [10, 20, 30, 40, 50];
for (let value of iterableArray) {
  console.log("Цикл for...of: " + value);
}
```

### Цикл for...in

Ітерація по ключах об’єкта, що дозволяє працювати з усіма його властивостями.

```javascript
let object = {a: 1, b: 2, c: 3};
for (let key in object) {
  console.log("Цикл for...in: " + key + " = " + object[key]);
}
```

## 8. Висновок

У цій лекції ми розглянули масиви та цикли, включаючи вкладені масиви, доступ до даних масиву, зміну даних масиву, доступ до багатовимірних масивів та різні типи циклів. Ці основні концепції допоможуть вам розпочати програмування на JavaScript та підготують вас до більш складних тем у майбутніх лекціях.

## Summary of all materials in the lecture folder

- `lecture4-Arrays-Loops.md`: Основний текст лекції з масивів та циклів у JavaScript.
- `lecture4-Arrays-Loops.pdf`: Презентація лекції у форматі PDF.
- `lecture4-Arrays-Loops.js`: Приклади коду JavaScript, що використовуються у лекції.
- `exercise4-Arrays-Loops.md`: Вправа для практики роботи з масивами та циклами.
</file>

<file path="lectures/lesson6-Cryptocurrencies-Blockchain/lecture6-Cryptocurrencies-Blockchain.md">
# Лекція 6: Криптовалюти та блокчейн

[PDF Презентація Лекції 6](./lecture6-Cryptocurrencies-Blockchain.pdf)

https://dashboard.blooket.com/set/67ea696d800f8fd4069c866b

Генерація ключів і підписів повідомлень:
https://github.com/oldens/key-generator-message-signer

https://oldens.github.io/key-generator-message-signer/


Проект обміну повідомленнями, емуляція блокчейну:
https://github.com/oldens/blockchain-project

https://oldens.github.io/blockchain-project/


## Вступ

Вітаємо вас на всеохоплюючому курсі з основ криптовалют та блокчейн-технологій! Ми розглянемо фундаментальні концепції криптопростору з особливим акцентом на Bitcoin – першій та найвпливовішій криптовалюті світу.

Наш курс допоможе вам зрозуміти ключові переваги та відмінні риси блокчейну порівняно з традиційними системами баз даних. Починаючи з криптовалют як перших застосувань блокчейну, ми поступово перейдемо до того, як ці технології можуть вирішувати нові проблеми в різних галузях.

## Структура курсу: шість модулів для повного розуміння

1. Огляд Bitcoin на високому рівні
2. Основні властивості та принципи роботи децентралізованої валюти
3. Історія блокчейну: від руху Шифропанків до корпоративного використання
4. Технічний огляд механіки Bitcoin
5. Bitcoin у реальному житті: гаманці, майнінг та практичне застосування
6. Теорія ігор і мережеві атаки: уразливості та можливі загрози для мережі
7. Ethereum і смарт-контракти: розширення можливостей децентралізованого майбутнього

## Огляд Bitcoin на високому рівні

### Основні властивості та принципи роботи децентралізованої валюти

Bitcoin – це децентралізована цифрова валюта, яка працює без центрального банку або єдиного адміністратора. Транзакції перевіряються мережею вузлів за допомогою криптографії та записуються у публічний розподілений реєстр, який називається блокчейн.

### Історія блокчейну

Блокчейн був вперше описаний у 2008 році особою або групою осіб під псевдонімом Сатоші Накамото. У 2009 році було випущено перше програмне забезпечення Bitcoin, яке запустило мережу та почало генерувати перші блоки.

### Технічний огляд механіки Bitcoin

Bitcoin використовує алгоритм консенсусу Proof of Work (PoW) для забезпечення безпеки та узгодженості мережі. Майнеры змагаються за вирішення складних криптографічних задач, щоб додати нові блоки до блокчейну та отримати винагороду у вигляді нових Bitcoin.

### Bitcoin у реальному житті

Bitcoin можна використовувати для здійснення транзакцій, зберігання вартості та інвестування. Гаманці дозволяють користувачам зберігати свої Bitcoin та здійснювати транзакції. Майнінг забезпечує функціонування мережі та підтвердження транзакцій.

### Теорія ігор і мережеві атаки

Bitcoin піддається різним типам атак, таким як атака 51%, атака подвійного витрачання та мережеві атаки. Теорія ігор допомагає зрозуміти, як учасники мережі взаємодіють та які стратегії можуть використовувати для забезпечення безпеки мережі.

### Ethereum і смарт-контракти

Ethereum – це децентралізована платформа, яка дозволяє створювати та виконувати смарт-контракти. Смарт-контракти – це самовиконувані контракти з умовами угоди, записаними в коді. Вони автоматично виконуються при досягненні визначених умов без необхідності втручання третіх сторін.

## Висновок

Цей курс надасть вам глибоке розуміння основ криптовалют та блокчейн-технологій, а також допоможе зрозуміти, як ці технології можуть бути використані для вирішення реальних проблем у різних галузях.

## Summary of all materials in the lecture folder

- `lecture6-Cryptocurrencies-Blockchain.md`: Основний текст лекції з криптовалют та блокчейн-технологій.
- `lecture6-Cryptocurrencies-Blockchain.pdf`: Презентація лекції у форматі PDF.
- `exercise6-Encrypting-Messages.md`: Практичне заняття для шифрування повідомлень.
- `questions.csv`: Питання для перевірки знань з криптовалют та блокчейн-технологій.
</file>

<file path="README.md">
# КУРС “ОСНОВИ JAVASCRIPT”

блукет практично по всіх темах https://dashboard.blooket.com/set/6797a23cf1f249a33cf41e4a

## ВСТУПНА ЧАСТИНА

### ВСТУП

Ознайомлення з основними поняттями JavaScript та його роллю у створенні динамічних веб-сторінок. Обговорення важливості мови як основного інструменту для інтерактивного програмування у браузері.

### ВИКОНАННЯ JAVASCRIPT

Як запускати JavaScript-код у браузері, використовуючи консоль розробника. Розгляд інших способів виконання JavaScript: вбудовані скрипти, зовнішні файли.

### КОМЕНТУВАННЯ КОДУ

Використання коментарів для пояснення коду або тимчасового вимкнення його частини. Пояснення різниці між однорядковими (//) та багаторядковими (/* */) коментарями.

## ЗМІННІ

### ОГОЛОШЕННЯ ЗМІННИХ

Var, let, const: пояснення ключових слів для оголошення змінних, різниця між ними (область видимості, можливість переназначення тощо).

### Чутливість до регістру

Регістри camelCase (назви змінних і функцій), PascalCase (класи), snake_case, UPPER_CASE (константи), kebab-case (назви файлів, класи CSS)

### ОПЕРАТОР ПРИСВОЄННЯ

Як оператор = використовується для збереження значень у змінних. Пояснення основних принципів присвоєння, включаючи оновлення існуючих значень.

### ІНІЦІАЛІЗАЦІЯ ЗМІННИХ

Оголошення змінної та одночасне присвоєння їй значення. Розгляд кращих практик для уникнення помилок. Опис ситуацій, коли змінна оголошена, але їй не присвоєно значення, та чому її значення автоматично дорівнює undefined.

## ТИПИ ДАНИХ

### Примітивні типи

number, string, boolean, undefined, null, symbol, bigint

### Складний тип

object (включаючи Functions, Arrays)

### Динамічна типізація

### Оператор: typeof

## МАТЕМАТИКА

### БАЗОВА МАТЕМАТИКА

Додавання, віднімання, множення та ділення. Порядок виконання операцій. Використання операторів ++ і -- для збільшення або зменшення значення змінної на 1.

### ДЕСЯТКОВІ ЧИСЛА

Робота з числами з плаваючою комою. Пояснення можливих проблем точності при виконанні операцій із десятковими числами. Множення та ділення з використанням десяткових чисел.

### ЗАЛИШОК ВІД ДІЛЕННЯ % (FINDING A REMAINDER)

Розгляд методу отримання залишку від ділення %

### СКОРОЧЕНІ ОПЕРАТОРИ

Застосування скорочених операторів, таких як +=, -=, *=, /= для оновлення значень змінних.

## РЯДКИ (STRING)

### РОБОТА З РЯДКАМИ

Основи роботи з рядками: створення, об’єднання, вставка змінних у рядки. Квадратні дужки для доступу до символів рядка за індексом.

### ЕКРАНУВАННЯ СИМВОЛІВ У РЯДКАХ (ESCAPING LITERAL QUOTES)

Як уникати проблем із використанням спеціальних символів, таких як лапки, за допомогою символу екранування (\). Escape Sequences. Використання лапок. Escape-послідовності дозволяють вставляти спеціальні символи у рядки.

### МЕТОДИ РОБОТИ З РЯДКАМИ

Використання вбудованих методів для визначення довжини рядка, і створення нових рядків.

### НЕЗМІННІСТЬ РЯДКІВ (UNDERSTAND STRING IMMUTABILITY)

У JavaScript рядки є незмінними, тобто їх не можна змінити після створення. Будь-яка зміна рядка створює новий рядок, а оригінальний залишається незмінним.

### ПОШУК СИМВОЛУ ЗА ІНДЕКСОМ (FIND THE NTH CHARACTER)

Використовуючи індекс символу, можна знайти будь-який символ у рядку. Індекси починаються з нуля, тобто перший символ має індекс 0.

### ЗАПОВНЕННЯ СЛІВ (WORD BLANKS)

Вставка змінних у текстові шаблони дозволяє створювати динамічні речення. Це використовується для створення інтерактивних текстових додатків або ігор.

## ЛОГІЧНІ ОПЕРАТОРИ ТА УМОВНІ КОНСТРУКЦІЇ

### ЛОГІЧНІ ЗНАЧЕННЯ (BOOLEAN VALUES)

Логічні значення — це два можливі значення: true або false, які використовуються для перевірки умов. Вони є основою для керування потоком виконання програм.

### УМОВНІ ОПЕРАТОРИ (IF ELSE STATEMENTS)

Оператор if дозволяє виконувати код, якщо певна умова є істинною (true). Оператор else задає альтернативний блок коду, який виконується, якщо умова в if є хибною (false).

### ОПЕРАТОРИ РІВНОСТІ (EQUALITY OPERATORS)

Оператори рівності (== і ===) використовуються для порівняння значень. == перевіряє тільки значення, тоді як === перевіряє також тип даних.

### ОПЕРАТОРИ І ТА АБО (AND / OR OPERATORS)

Оператори && (І) та || (АБО) дозволяють об’єднувати кілька умов. && повертає true, якщо всі умови істинні, а || — якщо хоча б одна умова істинна.

### ЛОГІЧНИЙ ПОРЯДОК У КОНСТРУКЦІЯХ IF-ELSE (LOGICAL ORDER IN IF ELSE STATEMENTS)

Умови у конструкції if-else перевіряються зверху вниз, тому важливо розташовувати їх у логічно правильному порядку для забезпечення коректного виконання коду.

### ТЕРНАРНИЙ ОПЕРАТОР (TERNARY OPERATOR)

Тернарний оператор (? :) дозволяє скоротити умовну конструкцію if-else до одного рядка. Використовується для повернення одного з двох значень залежно від умови.

### ОПЕРАТОР SWITCH (SWITCH STATEMENTS)

Switch — це конструкція, яка дозволяє перевіряти одну змінну на відповідність кільком можливим значенням. Замість багатьох if-else використовується більш компактна структура.

### ШАБЛОН РАННЬОГО ВИХОДУ ДЛЯ ФУНКЦІЙ (RETURN EARLY PATTERN FOR FUNCTIONS)

Шаблон раннього виходу дозволяє завершити виконання функції, якщо умова виконується. Це покращує продуктивність і робить код більш зрозумілим.

## ДЕБАГІНГ У CHROME

З інструментами розробника Chrome, відкривати консоль, встановлювати брекпоінти, використовувати watch-вирази та аналізувати виконання JavaScript-коду.

## ФУНКЦІЇ

Функції дозволяють створювати повторно використовувані блоки коду, які можна викликати багаторазово. Це сприяє спрощенню структури програми та зменшенню дублювання коду.

### АРГУМЕНТИ (ARGUMENTS)

Аргументи — це значення, які передаються функції під час її виклику. Вони дозволяють налаштовувати поведінку функції залежно від переданих даних.

### ПАРАМЕТРИ ЗА ЗАМОВЧУВАННЯМ (DEFAULT PARAMETERS)

Параметри за замовчуванням дозволяють задавати значення для параметрів функції, якщо вони не були передані під час виклику. Це забезпечує надійність та запобігає помилкам.

## ОБЛАСТЬ ВИДИМОСТІ

### ГЛОБАЛЬНА ОБЛАСТЬ ВИДИМОСТІ (GLOBAL SCOPE)

Змінні, оголошені поза функціями (var), мають глобальну область видимості. Вони доступні для використання у будь-якій частині програми.

### ЛОКАЛЬНА ОБЛАСТЬ ВИДИМОСТІ (LOCAL SCOPE)

Змінні, оголошені всередині функції (let), мають локальну область видимості. Вони доступні лише в межах цієї функції та зникають після її завершення.

### ГЛОБАЛЬНА VS ЛОКАЛЬНА ОБЛАСТЬ ВИДИМОСТІ У ФУНКЦІЯХ (GLOBAL VS LOCAL SCOPE IN FUNCTIONS)

Коли у функції є змінні з однаковою назвою, що існують у глобальній і локальній області, пріоритет має локальна змінна.

### ПОВЕРНЕННЯ ЗНАЧЕННЯ З ФУНКЦІЇ (RETURN A VALUE FROM A FUNCTION)

Функції можуть повертати значення за допомогою оператора return. Це значення можна використовувати поза межами функції для подальших обчислень або дій. Функції, які не містять оператора return, повертають undefined за замовчуванням. Це вказує на відсутність повернутого значення.

## МАСИВИ

### ВКЛАДЕНІ МАСИВИ (NEST ARRAYS)

Масиви можуть містити інші масиви як свої елементи, утворюючи багатовимірні структури. Це зручно для представлення таблиць, матриць або складних даних.

### ДОСТУП ДО ДАНИХ МАСИВУ (ACCESS ARRAY DATA)

Елементи масиву доступні за їх індексами, починаючи з нуля. Це дозволяє отримувати або використовувати значення, які зберігаються в масиві.

### ЗМІНА ДАНИХ МАСИВУ (MODIFY ARRAY DATA)

Елементи масиву можуть бути змінені шляхом присвоєння нового значення за індексом. Це дозволяє оновлювати інформацію без створення нового масиву.

### ДОСТУП ДО БАГАТОВИМІРНИХ МАСИВІВ (ACCESS MULTI-DIMENSIONAL ARRAYS)

Для доступу до елементів вкладених масивів використовується кілька індексів. Перший індекс вказує на масив, а другий — на елемент у цьому вкладеному масиві.

### ОСНОВНІ МЕТОДИ

push() додає один або кілька елементів до кінця масиву. pop() видаляє останній елемент з масиву і повертає його. shift() видаляє перший елемент масиву, а решта елементів зсуваються на одну позицію вліво. unshift() додає один або кілька елементів на початок масиву, зсуваючи всі інші елементи вправо.

### ІТЕРАЦІЙНІ МЕТОДАМИ МАСИВІВ (ARRAY ITERATION METHODS)

map, filter або reduce.

## ОСНОВИ РОБОТИ З DOM (DOM BASICS)

DOM (Document Object Model) — це програмна інтерфейсна модель для HTML-документів, яка представляє структуру веб-сторінки як дерево об’єктів. JavaScript може використовувати DOM для маніпуляцій елементами сторінки, їх створення, зміни або видалення в реальному часі. DOM — це спосіб представлення HTML-документа у вигляді дерева, де кожен елемент сторінки є вузлом (node). Через DOM JavaScript отримує доступ до HTML і дозволяє змінювати як структуру сторінки, так і її стилі або вміст.

### ОСНОВНІ ДІЇ З DOM

#### ДОСТУП ДО ЕЛЕМЕНТІВ:

document.querySelector: Вибирає перший елемент, який відповідає заданому селектору (клас, ідентифікатор, тег). document.querySelectorAll: Вибирає всі елементи, які відповідають заданому селектору, і повертає NodeList. getElementById: Вибирає елемент за унікальним ідентифікатором. getElementsByClassName / getElementsByTagName: Вибирають елементи за класом або тегом.

#### ЗМІНА ВМІСТУ:

innerHTML: Змінює весь HTML-вміст елемента. textContent: Змінює текстовий вміст елемента без форматування HTML.

#### ДОДАВАННЯ ТА ВИДАЛЕННЯ ЕЛЕМЕНТІВ:

createElement: Створює новий елемент. appendChild: Додає новий елемент як дочірній до існуючого. removeChild: Видаляє елемент зі сторінки.

### ПОДІЇ В DOM

Події дозволяють реагувати на дії користувачів (наприклад, кліки, введення тексту) або на системні події.

#### ДОДАВАННЯ ОБРОБНИКІВ ПОДІЙ:

addEventListener: Додає слухача подій до елемента. Наприклад, реагування на кліки, наведення миші, зміну вмісту.

#### ТИПОВІ ПОДІЇ:

click — Натискання на елемент. mouseover — Наведення курсора миші на елемент. keydown — Натискання клавіші на клавіатурі. input — Зміна текстового вмісту у формі.

## АТРИБУТИ ТА СТИЛІ

### РОБОТА З АТРИБУТАМИ:

getAttribute / setAttribute: Отримання або встановлення значення атрибута. removeAttribute: Видалення атрибута.

### ЗМІНА СТИЛІВ:

style: Зміна інлайн-стилів елемента. classList: Дозволяє додавати, видаляти або перемикати класи (add, remove, toggle).

## ВЗАЄМОДІЯ З ФОРМАМИ

value: Отримання або зміна значення елементів форм (текстові поля, чекбокси тощо). Події, такі як submit: Використовуються для обробки даних, введених у форми.

## НАВІГАЦІЯ DOM

DOM дозволяє переміщатися між вузлами сторінки. parentNode: Отримує батьківський елемент. childNodes / children: Доступ до дочірніх вузлів. nextSibling / previousSibling: Отримання сусідніх вузлів.

## ВИСНОВОК

Робота з DOM — основа створення динамічних і інтерактивних веб-додатків. DOM надає інструменти для вибору елементів, управління подіями та зміни структури сторінки, роблячи веб-додатки інтерактивними та гнучкими.

## ЦИКЛИ (LOOPS)

Цикли у JavaScript використовуються для виконання повторюваних дій, таких як обхід масивів або виконання коду до досягнення певної умови.

### Цикл while

Виконує код доти, доки задана умова залишається істинною. Якщо умова стає хибною, виконання циклу припиняється.

### Цикл do...while

Виконує код хоча б один раз, незалежно від умови, і перевіряє її лише після виконання першої ітерації.

### Цикл for

Цикл із визначеною кількістю ітерацій, що включає ініціалізацію, перевірку умови і оновлення змінних у кожній ітерації.

### Цикл for...of

Використовується для ітерації по елементах масивів або інших ітеративних об’єктів, забезпечуючи зручний доступ до значень.

### Цикл for...in

Ітерація по ключах об’єкта, що дозволяє працювати з усіма його властивостями.

### Примітка щодо використання циклів

Обирайте тип циклу залежно від завдання: while для невизначеної кількості ітерацій, for для відомої кількості ітерацій, for...of для роботи зі значеннями, а for...in для об’єктів. Для складних ітераційних завдань замість циклів можна використовувати методи масивів, такі як map, filter або reduce.

## РОБОТА З ПОМИЛКАМИ (ERROR HANDLING)

Робота з помилками дозволяє забезпечити стабільність і надійність коду, навіть якщо щось пішло не так. try…catch: Конструкція для обробки помилок, яка дозволяє виконувати певний код і реагувати на помилки. console.error: Використовується для виведення повідомлень про помилки у консоль. Стандартні помилки: Обробка типових помилок JavaScript, таких як SyntaxError, ReferenceError та інші.

## ЧЕРГА (STAND IN LINE)

Черга — це структура даних, де перший елемент, який додається, є першим, який видаляється (FIFO). За допомогою масивів та функцій можна моделювати чергу, додаючи елементи в кінець і видаляючи їх з початку.

## ПІДХІД ДО ВІДЛАГОДЖЕННЯ (DEBUGGING APPROACH)

Ефективне відлагодження допомагає знаходити та виправляти помилки у коді. Інструменти розробника (Developer Tools): Доступні у більшості браузерів, ці інструменти дозволяють переглядати HTML, CSS і JavaScript, встановлювати точки зупину та переглядати змінні в реальному часі. Консоль: Використовуйте console.log, console.error для відображення даних і помилок під час виконання коду. Дебагер (debugger): Ключове слово для паузи виконання коду в потрібному місці.

## АСИНХРОННЕ ПРОГРАМУВАННЯ (ASYNCHRONOUS PROGRAMMING)

Асинхронне програмування дозволяє виконувати операції без блокування основного потоку коду. Це важливо для роботи з таймерами, серверними запитами та іншими довготривалими операціями. setTimeout: Використовується для виконання коду через певний проміжок часу. Promise: Структура для управління асинхронними операціями з можливістю обробки успішних і невдалих результатів. async/await: Сучасний синтаксис для написання асинхронного коду, що робить його читабельним і простим у використанні.

## ОБ’ЄКТИ

### СТВОРЕННЯ ОБ’ЄКТІВ (BUILD OBJECTS)

Об’єкти — це структура даних, яка зберігає значення у форматі пар “ключ-значення”. Вони дозволяють моделювати реальні об’єкти з їх властивостями та поведінкою.

### ДОСТУП ЗА ДОПОМОГОЮ КРАПКОВОЇ НОТАЦІЇ (DOT NOTATION)

Крапкова нотація використовується для доступу до властивостей об’єкта за їхніми іменами. Це найзручніший спосіб роботи з простими об’єктами.

### ДОСТУП ЗА ДОПОМОГОЮ КВАДРАТНИХ ДУЖОК (BRACKET NOTATION)

Квадратні дужки дозволяють отримувати доступ до властивостей об’єкта за допомогою динамічних або рядкових ключів. Використовується, коли ключі зберігаються у змінних або містять спеціальні символи.

### ВИКОРИСТАННЯ ЗМІННИХ ЯК КЛЮЧІВ (VARIABLES)

Змінні можуть зберігати імена ключів об’єкта, дозволяючи динамічно доступатися до значень. Це особливо корисно для роботи з даними, отриманими під час виконання програми.

### ОНОВЛЕННЯ ВЛАСТИВОСТЕЙ ОБ’ЄКТА (UPDATING OBJECT PROPERTIES)

Існуючі властивості об’єкта можна змінити, призначивши їм нове значення. Це дозволяє оновлювати дані без створення нового об’єкта.

### ДОДАВАННЯ НОВИХ ВЛАСТИВОСТЕЙ ДО ОБ’ЄКТА (ADD NEW PROPERTIES TO OBJECT)

Нові властивості можуть бути додані до об’єкта за допомогою крапкової або квадратної нотації. Це дозволяє динамічно розширювати об’єкти.

### ВИДАЛЕННЯ ВЛАСТИВОСТЕЙ З ОБ’ЄКТА (DELETE PROPERTIES FROM OBJECT)

Властивості об’єкта можна видалити за допомогою оператора delete. Це корисно для видалення зайвих або тимчасових даних.

### ОБ’ЄКТИ ДЛЯ ПОШУКУ (OBJECTS FOR LOOKUPS)

Об’єкти використовуються як “словники”, де ключі відповідають поняттям, а значення — їх визначенням. Це забезпечує швидкий доступ до інформації.

### ПЕРЕВІРКА ВЛАСТИВОСТЕЙ ОБ’ЄКТА (TESTING OBJECTS FOR PROPERTIES)

Метод hasOwnProperty() або оператор in дозволяють перевірити, чи існує певна властивість в об’єкті. Це запобігає помилкам під час доступу до неіснуючих властивостей.

### МАНІПУЛЯЦІЯ СКЛАДНИМИ ОБ’ЄКТАМИ (MANIPULATING COMPLEX OBJECTS)

Складні об’єкти можуть містити масиви, вкладені об’єкти або обидва одночасно. Їх маніпуляція вимагає поетапного доступу до потрібних властивостей або елементів.

### ВКЛАДЕНІ ОБ’ЄКТИ (NESTED OBJECTS)

Об’єкти можуть містити інші об’єкти як свої властивості. Це дозволяє представляти складні дані, наприклад, ієрархічні структури. Для доступу до вкладених властивостей використовується крапкова або квадратна нотація.

### СИНТАКСИС КЛАСІВ (CLASS SYNTAX)

Синтаксис класів у JavaScript — це сучасний спосіб створення об’єктів із спільними властивостями та методами. Він дозволяє використовувати об’єктно-орієнтований підхід у програмуванні, надаючи зрозумілу структуру для створення багаторазових та організованих кодових компонентів.

Основні моменти:

1. Клас як шаблон: Клас — це “шаблон” для створення об’єктів із однаковими наборами властивостей (атрибутів) та методів (функцій).

2. Конструктор: У класах використовується метод constructor, який викликається автоматично при створенні нового об’єкта і дозволяє задавати початкові значення властивостей.

3. Методи класу: Методи, що оголошуються всередині класу, можуть бути викликані об’єктами, створеними з цього класу.

4. Наслідування: Класи дозволяють створювати нові класи, які наслідують властивості та методи іншого класу. Це забезпечує повторне використання коду.

5. Читабельність та структура: Синтаксис класів робить код більш читабельним і структурованим, що полегшує підтримку та розширення проєкту.

## КОРИСНІ ШТУКИ

### ВИПАДКОВІ ДРОБИ ТА ЦІЛІ ЧИСЛА (RANDOM FRACTIONS AND WHOLE NUMBERS)

JavaScript дозволяє створювати випадкові дробові числа за допомогою Math.random(). Для отримання випадкових цілих чисел використовується Math.floor() разом із Math.random() для округлення результату.

### ФУНКЦІЯ PARSEINT (PARSEINT FUNCTION)

Функція parseInt() перетворює рядок у ціле число. Вона може приймати другий аргумент для вказання системи числення (наприклад, десяткова, двійкова).

### ЗАПОБІГАННЯ ЗМІНАМ ОБ’ЄКТІВ (PREVENT OBJECT MUTATION)

Метод Object.freeze() робить об’єкт незмінним, блокуючи додавання, видалення або зміну його властивостей. Це корисно для створення константних структур даних.

### ОПЕРАТОР ЗАЛИШКУ (REST OPERATOR)

Оператор залишку (...) збирає всі “надлишкові” аргументи функції у масив. Використовується для роботи з невизначеною кількістю параметрів або для розподілу даних.

### ОПЕРАТОР РОЗПАКУВАННЯ (SPREAD OPERATOR)

Оператор розпакування (...) дозволяє розділити масив чи об’єкт на окремі елементи. Він використовується для копіювання, злиття даних або передачі значень у функції.

### ДЕСТРУКТУРИЗАЦІЯ (DESTRUCTURING ASSIGNMENT)

Деструктуризація дозволяє зручно витягувати значення з масивів або об’єктів та присвоювати їх змінним. Це спрощує доступ до даних і робить код більш читабельним.

### ШАБЛОННІ ЛІТЕРАЛИ (TEMPLATE LITERALS)

Шаблонні літерали (````) дозволяють створювати рядки, що включають змінні та вирази, використовуючи інтерполяцію ${}. Вони також підтримують багаторядкові рядки.

### ПРОСТІ ПОЛЯ (SIMPLE FIELDS)

Прості поля (simple fields) у об’єктах дозволяють скоротити синтаксис, коли назва властивості збігається з назвою змінної, що містить значення.

### ДЕКЛАРАТИВНІ ФУНКЦІЇ (DECLARATIVE FUNCTIONS)

Функції можна оголошувати без прив’язки до змінних всередині об’єкта. Це зменшує кількість коду та полегшує читання.

### СТРІЛОЧНІ ФУНКЦІЇ, ДЕСТРУКТИРИЗАЦІЯ, ШАБЛОННІ РЯДКИ

Використання стрілочних функцій для спрощення синтаксису. Впровадження ключових слів let і const, деструктуризація, шаблонні рядки та інші нові можливості ES6.

## РОБОТА З JSON (JSON BASICS)

JSON (JavaScript Object Notation) — це текстовий формат для зберігання та обміну даними між сервером і клієнтом. JSON.parse: Перетворює JSON-рядок у JavaScript-об’єкт. Використовується для роботи з даними, отриманими від серверів. JSON.stringify: Перетворює JavaScript-об’єкт у JSON-рядок для зберігання або передачі даних.

## МОДУЛІ

Як розділити код на файли за допомогою модулів import та export. Пояснення переваг модульного підходу для організації проектів.

## ОБ’ЄКТНО-ОРІЄНТОВАНЕ ПРОГРАМУВАННЯ (ООП)

### ОСНОВИ ООП (INTRODUCTION TO OOP)

Опис: Введення в концепцію об’єктно-орієнтованого програмування. Обговорення, чому ООП важливе для побудови великих та підтримуваних додатків.

Ключові теми:
- Що таке ООП.
- Принципи ООП: інкапсуляція, наслідування, поліморфізм, абстракція.
- Реальні приклади використання ООП.

### СТВОРЕННЯ КЛАСІВ ТА ЕКЗЕМПЛЯРІВ (CLASSES AND INSTANCES)

Опис: Огляд синтаксису класів у JavaScript як сучасного способу створення об’єктів.

Ключові теми:
- Синтаксис класів (class).
- Конструктор (constructor) та ініціалізація властивостей.
- Створення екземплярів класів.

### МЕТОДИ ТА ВЛАСТИВОСТІ КЛАСІВ (CLASS METHODS AND PROPERTIES)

Опис: Вивчення методів і властивостей, що описують поведінку та стан об’єктів.

Ключові теми:
- Властивості класів.
- Методи класів.
- Використання this для доступу до властивостей і методів.

### ІНКАПСУЛЯЦІЯ (ENCAPSULATION)

Опис: Як обмежувати доступ до внутрішніх деталей об’єкта за допомогою приватних полів та методів.

Ключові теми:
- Приватні поля та методи (#).
- Гетери (get) та сетери (set) для управління доступом.
- Приховування деталей реалізації.

### НАСЛІДУВАННЯ ТА РОЗШИРЕННЯ КЛАСІВ (INHERITANCE AND CLASS EXTENSION)

Опис: Використання наслідування для створення нових класів на основі існуючих.

Ключові теми:
- Ключове слово extends для наслідування.
- Виклик методу батьківського класу через super.
- Перевизначення методів у дочірніх класах.

### ПОЛІМОРФІЗМ (POLYMORPHISM)

Опис: Розуміння, як однаковий інтерфейс може мати різні реалізації.

Ключові теми:
- Перевизначення методів у дочірніх класах.
- Переваги використання поліморфізму.

### СТАТИЧНІ МЕТОДИ ТА ВЛАСТИВОСТІ (STATIC METHODS AND PROPERTIES)

Опис: Як працювати зі статичними методами та властивостями класу, які належать самому класу, а не його екземплярам.

Ключові теми:
- Використання ключового слова static.
- Відмінності між статичними і нестатичними методами.

### ВБУДОВАНІ КЛАСИ JAVASCRIPT (BUILT-IN CLASSES IN JAVASCRIPT)

Опис: Огляд вбудованих класів JavaScript (наприклад, Date, Math) та їх використання.

Ключові теми:
- Властивості та методи вбудованих класів.
- Створення нових екземплярів за допомогою вбудованих класів.

### ПРАКТИКА: РЕАЛІЗАЦІЯ РЕАЛЬНИХ ЗАДАЧ З ВИКОРИСТАННЯМ ООП

Опис: Практичні завдання для закріплення знань про класи, інкапсуляцію, наслідування та поліморфізм.

Ключові теми:
- Моделювання реального об’єкта (наприклад, “Користувач”, “Транспортний засіб”).
- Побудова ієрархії класів.

### РОЗШИРЕНІ ТЕМИ ООП (ОПЦІЙНО ДЛЯ РОЗШИРЕНИХ КУРСІВ)

- Абстрактні класи та методи.
- Інтерфейси (імітація через JavaScript).
- Декоратори.

For additional information and resources, please refer to the following:

- [MDN Web Docs: JavaScript](https://developer.mozilla.org/en-US/docs/Web/JavaScript)
- [JavaScript.info](https://javascript.info/)
- [W3Schools: JavaScript Tutorial](https://www.w3schools.com/js/)
</file>

</files>
